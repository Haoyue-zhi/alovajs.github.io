"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[7074],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=u(n),c=r,f=p["".concat(s,".").concat(c)]||p[c]||d[c]||i;return n?a.createElement(f,l(l({ref:t},m),{},{components:n})):a.createElement(f,l({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const i="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),i=n(6010),l=n(2466),o=n(6550),s=n(1980),u=n(7392),m=n(12);function d(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function c(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(a.location.search);t.set(i,e),a.replace({...a.location,search:t.toString()})}),[i,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,i=p(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!c({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:n,groupId:a}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,i]=(0,m.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:a}),g=(()=>{const e=s??d;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{g&&o(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),h(e)}),[u,h,i]),tabValues:i}}var g=n(2389);const k="tabList__CuJ",b="tabItem_LNqP";function N(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const m=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=m.indexOf(t),a=u[n].value;a!==o&&(d(t),s(a))},c=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=m.indexOf(e.currentTarget)+1;n=m[t]??m[0];break}case"ArrowLeft":{const t=m.indexOf(e.currentTarget)-1;n=m[t]??m[m.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>m.push(e),onKeyDown:c,onClick:p},l,{className:(0,i.Z)("tabs__item",b,null==l?void 0:l.className,{"tabs__item--active":o===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:a}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function y(e){const t=h(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",k)},r.createElement(N,(0,a.Z)({},e,t)),r.createElement(v,(0,a.Z)({},e,t)))}function w(e){const t=(0,g.Z)();return r.createElement(y,(0,a.Z)({key:String(t)},e))}},1744:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>d});var a=n(7462),r=(n(7294),n(3905)),i=n(4866),l=n(5162);const o={title:"Form submit strategy",sidebar_position:30},s=void 0,u={unversionedId:"strategy/useForm",id:"strategy/useForm",title:"Form submit strategy",description:"use hook",source:"@site/docs/07-strategy/03-useForm.md",sourceDirName:"07-strategy",slug:"/strategy/useForm",permalink:"/strategy/useForm",draft:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/07-strategy/03-useForm.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"Form submit strategy",sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Pagination request strategy",permalink:"/strategy/usePagination"},next:{title:"send captcha",permalink:"/strategy/useCaptcha"}},m={},d=[{value:"Example",id:"example",level:2},{value:"Features",id:"features",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Basic usage",id:"basic-usage",level:3},{value:"Submit auto reset form",id:"submit-auto-reset-form",level:3},{value:"Form draft",id:"form-draft",level:3},{value:"Multi-page/multi-step forms",id:"multi-pagemulti-step-forms",level:3},{value:"Conditional filter",id:"conditional-filter",level:3},{value:"API",id:"api",level:2},{value:"Hook configuration",id:"hook-configuration",level:3},{value:"Responsive data",id:"responsive-data",level:3},{value:"StoreDetailConfig",id:"storedetailconfig",level:4},{value:"DataSerializer",id:"dataserializer",level:4},{value:"Action function",id:"action-function",level:3},{value:"Event",id:"event",level:3}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"strategy type",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"use hook")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Before using extension hooks, make sure you are familiar with the basic usage of alova.")),(0,r.kt)("p",null,"A hook designed for form submission. Through this hook, you can easily implement form drafts and multi-page (multi-step) forms. In addition, it also provides common functions such as form reset."),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/example/form-hook"},"Form Submission Demo")),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u2728 draft form;"),(0,r.kt)("li",{parentName:"ul"},"\u2728 Multi-page (multi-step) forms;"),(0,r.kt)("li",{parentName:"ul"},"\u2728 Form submission automatically resets data;"),(0,r.kt)("li",{parentName:"ul"},"\u2728Reset form data manually;")),(0,r.kt)("h2",{id:"install"},"Install"),(0,r.kt)(i.Z,{groupId:"framework",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"1",label:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install @alova/scene-vue --save\n#yarn\nyarn add @alova/scene-vue\n\n"))),(0,r.kt)(l.Z,{value:"2",label:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install @alova/scene-react --save\n#yarn\nyarn add @alova/scene-react\n\n"))),(0,r.kt)(l.Z,{value:"3",label:"svelte",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# npm\nnpm install @alova/scene-svelte --save\n#yarn\nyarn add @alova/scene-svelte\n\n")))),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"basic-usage"},"Basic usage"),(0,r.kt)("p",null,"Demonstrates basic use of form hooks."),(0,r.kt)(i.Z,{groupId:"framework",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"1",label:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  <input v-model="form.name" />\n  <select v-model="form.cls">\n    <option value="1">class 1</option>\n    <option value="2">class 2</option>\n    <option value="3">class 3</option>\n  </select>\n  <button\n    @click="handleSubmit"\n    :loading="submitting">\n    submit\n  </button>\n</template>\n\n<script setup>\n  import { formSubmit } from \'./api.js\';\n  import { useForm } from \'@alova/scene-vue\';\n\n  const {\n    // submit status\n    loading: submitting,\n\n    // Responsive form data, the content is determined by initialForm\n    form,\n\n    // submit data function\n    send: submit,\n\n    // Submit successful callback binding\n    onSuccess,\n\n    // Submit failure callback binding\n    onError,\n\n    // Submit completed callback binding\n    onComplete\n  } = useForm(\n    formData => {\n      // Form data can be converted and submitted here\n      return submitData(formData);\n    },\n    {\n      // Initialize form data\n      initialForm: {\n        name: \'\',\n        cls: \'1\'\n      }\n    }\n  );\n\n  // submit form data\n  const handleSubmit = () => {\n    // Validate form data...\n    submit();\n  };\n<\/script>\n'))),(0,r.kt)(l.Z,{value:"2",label:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { formSubmit } from './api.js';\nimport { useForm } from '@alova/scene-react';\n\nconst App = () => {\n  const {\n    // submit status\n    loading: submitting,\n\n    // Responsive form data, the content is determined by initialForm\n    form,\n\n    // submit data function\n    send: submit,\n\n    // update form item\n    updateForm,\n\n    // Submit successful callback binding\n    onSuccess,\n\n    // Submit failure callback binding\n    onError,\n\n    // Submit completed callback binding\n    onComplete\n  } = useForm(\n    formData => {\n      // Form data can be converted and submitted here\n      return submitData(formData);\n    },\n    {\n      // Initialize form data\n      initialForm: {\n        name: '',\n        cls: '1'\n      }\n    }\n  );\n\n  // submit form data\n  const handleSubmit = () => {\n    // Validate form data...\n    submit();\n  };\n\n  return (\n    <div>\n      <input\n        value={form.name}\n        onChange={({ target }) => updateForm({ name: target.value })}\n      />\n      <select\n        value={form.cls}\n        onChange={({ target }) => updateForm({ cls: target.value })}>\n        <option value=\"1\">class 1</option>\n        <option value=\"2\">class 2</option>\n        <option value=\"3\">class 3</option>\n      </select>\n      <button\n        onClick={handleSubmit}\n        loading={submitting}>\n        submit\n      </button>\n    </div>\n  );\n};\n"))),(0,r.kt)(l.Z,{value:"3",label:"svelte",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script>\n  import { formSubmit } from \'./api.js\';\n  import { useForm } from \'@alova/scene-svelte\';\n\n  const {\n    // submit status\n    loading: submitting,\n\n    // Responsive form data, the content is determined by initialForm\n    form,\n\n    // submit data function\n    send: submit,\n\n    // Submit successful callback binding\n    onSuccess,\n\n    // Submit failure callback binding\n    onError,\n\n    // Submit completed callback binding\n    onComplete\n  } = useForm(\n    formData => {\n      // Form data can be converted and submitted here\n      return submitData(formData);\n    },\n    {\n      // Initialize form data\n      initialForm: {\n        name: \'\',\n        cls: \'1\'\n      }\n    }\n  );\n\n  // submit form data\n  const handleSubmit = () => {\n    // Validate form data...\n    submit();\n  };\n<\/script>\n\n<input bind:value="{$form.name}" />\n<select bind:value="{$form.cls}">\n  <option value="1">class 1</option>\n  <option value="2">class 2</option>\n  <option value="3">class 3</option>\n</select>\n<button\n  on:click="{handleSubmit}"\n  loading="{$submitting}">\n  submit\n</button>\n')))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," will not request by default, and the request will be sent after calling ",(0,r.kt)("inlineCode",{parentName:"p"},"send"),". At the same time, the callback function of ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," will pass in the latest form data. If you need to convert the data before submitting, you can convert it here, or Can be converted in the ",(0,r.kt)("inlineCode",{parentName:"p"},"formSubmit")," function."),(0,r.kt)("admonition",{title:"Caution",type:"caution"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"initialForm")," is to set the initial form data, ",(0,r.kt)("inlineCode",{parentName:"li"},"initialData")," is to set the initial response data, pay attention to the distinction;"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"updateForm")," is to update the form data, and ",(0,r.kt)("inlineCode",{parentName:"li"},"update")," is to update the response data, pay attention to the distinction;"))),(0,r.kt)("p",null,"The above example only shows a simple form submission function, there is no difference between ordinary form submissions, but ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," also implements more practical functions, let us continue to look down."),(0,r.kt)("h3",{id:"submit-auto-reset-form"},"Submit auto reset form"),(0,r.kt)("p",null,"Many times, we need to reset the form data after the form is submitted. We always need to manually reassign values one by one when implementing it ourselves, and ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," can help us do it automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"useForm(submitData, {\n  //...\n  // highlight-start\n  // Set this parameter to true to automatically reset the form data after submission\n  resetAfterSubmitting: true\n  // highlight-end\n});\n")),(0,r.kt)("p",null,"If you need to manually reset the form data, you can also do it by calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"reset")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  // highlight-start\n  // form reset function\n  reset\n  // highlight-end\n} = useForm(submitData, {\n  //...\n});\n\n// highlight-start\nconst handleReset = () => {\n  reset();\n};\n// highlight-end\n")),(0,r.kt)("h3",{id:"form-draft"},"Form draft"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," also provides a form draft function, even if the page is refreshed before the data is reset, the form data can be restored. The principle is to use the storage adapter on the alova instance to persist the form data. You only need to set ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," to true when using it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"useForm(submitData, {\n  //...\n  // highlight-start\n  // Turn on persistence to save data. After setting to true, uncommitted data will be persisted in real time\n  store: true\n  // highlight-end\n});\n")),(0,r.kt)("p",null,"Before the data is persisted, ",(0,r.kt)("inlineCode",{parentName:"p"},"JSON.stringify")," will be called to convert it into a JSON string. By default, the form data will be serialized when it is persisted. ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," has built-in ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RegExp")," instances , which will be useful when using timepickers."),(0,r.kt)("p",null,"In the form data only involves ",(0,r.kt)("inlineCode",{parentName:"p"},"Date")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RegEYou don\u2019t need to do more for xp")," instances, but if there are other non-JSON data, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"moment")," instances, we need to customize the serializer, but don\u2019t worry, the custom serializer is very simple, the following will show the settings A ",(0,r.kt)("inlineCode",{parentName:"p"},"moment")," serializer."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import moment from 'moment';\nconst momentSerializer = {\n   // forward is called when serializing\n   // Need to judge whether it is a moment instance, if it is not the target value, return undefined, indicating that it will not be processed\n   forward: data => moment.isMoment(data) ? data.valueOf() : undefined,\n\n   // backward is called during deserialization, data is the value returned in forward\n   backward: timestamp => moment(timestamp);\n};\n\nuseForm(\n   submitData,\n   {\n     store: {\n       enable: true,\n       serializers: {\n         moment: momentSerializer\n       }\n     }\n   }\n);\n")),(0,r.kt)("h3",{id:"multi-pagemulti-step-forms"},"Multi-page/multi-step forms"),(0,r.kt)("p",null,"Many times we encounter situations where form items are divided into multiple pages, or filled in multiple steps, and submitted in a unified manner at the end, such as multi-step user registration, questionnaire filling, etc., and forms with multiple steps may have interdependence Relationship, if realized by itself will bring some trouble. And ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," realizes form data sharing, you can get the same form data in different pages or components, which solves the problem of multi-step form data dependence, and does not need to summarize form data when submitting, and can submit directly."),(0,r.kt)("p",null,"When using, you need to set the id through ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm"),", and you can share the same form data between different pages with the same id. For example, we have a form that needs to go through 3 steps to fill out the form, and they will go through component A, component B, and component C respectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Component A -> Component B -> Component C\n")),(0,r.kt)("p",null,"At this point, we can initialize the form data inside component A:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=Component A",title:"Component",A:!0},"const returnStates = useForm(submitData, {\n  initialForm: {\n    step1Input: '',\n    step2Input: '',\n    step3Input: ''\n  },\n  // highlight-start\n  id: 'testForm'\n  // highlight-end\n});\nconst { form, send } = returnStates;\n")),(0,r.kt)("p",null,"In component B and component C, you can directly pass in the id in the first parameter to get the shared data in component A."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=Component B, Component C",title:"Component","B,":!0,Component:!0,C:!0},"const returnStates = useForm('testForm');\nconst { form, send } = returnStates;\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"returnStates")," returned by id in components B and C are the same reference as the ",(0,r.kt)("inlineCode",{parentName:"p"},"returnStates")," in component A. You can use the same ",(0,r.kt)("inlineCode",{parentName:"p"},"form"),", or you can call ",(0,r.kt)("inlineCode",{parentName:"p"},"send")," in any component to submit the form data uniformly."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"additional")),(0,r.kt)("p",null,"When obtaining shared data by directly specifying the id in components B and C, the id must first initialize the form data, just like in component A, otherwise ",(0,r.kt)("inlineCode",{parentName:"p"},"the form data of id {1} is not initial")," will be thrown mistake. If your multi-step form is not in a certain order, but in random order according to certain conditions, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# possible order 1\nComponent B -> Component A -> Component C\n\n# possible order 2\nComponent A -> Component C -> Component B\n\n# possible order 3\nComponent C -> Component A -> Component B\n\n#...\n")),(0,r.kt)("p",null,"In this case, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," in component B, C like component A."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"title=Component B, Component C",title:"Component","B,":!0,Component:!0,C:!0},"const returnStates = useForm(submitData, {\n  initialForm: {\n    step1Input: '',\n    step2Input: '',\n    step3Input: ''\n  },\n  id: 'testForm'\n});\n")),(0,r.kt)("p",null,"In this way, no matter which component is rendered first, the form with the id of testForm can be initialized, and the subsequent components will first use the initialized form data when encountering the id of testForm, and will not initialize again. This way you can initialize form data inside any component."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"More detailed multi-step forms can also be experienced and viewed in ",(0,r.kt)("a",{parentName:"p",href:"/example/form-hook"},"Form Submission Demo"),".")),(0,r.kt)("h3",{id:"conditional-filter"},"Conditional filter"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," can also be used in the filtering form used in data filtering scenarios, for example, if you want to search city information by city name, you can set ",(0,r.kt)("inlineCode",{parentName:"p"},"immediate=true"),", it will start querying data at initialization, and then In the operation, call ",(0,r.kt)("inlineCode",{parentName:"p"},"send")," to repeatedly query the data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { send: searchData } = useForm(queryCity, {\n  initialForm: {\n    cityName: ''\n  },\n  immediate: true\n});\n")),(0,r.kt)("admonition",{title:"Conditional Restrictions",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"In conditional filtering scenarios, ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," is more suitable for non-paginated list conditional queries. If you need to perform conditional queries in paginated lists, it is recommended to use ",(0,r.kt)("a",{parentName:"p",href:"/strategy/usePagination"},"Pagination Request Strategy (usePagination)"),".")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"hook-configuration"},"Hook configuration"),(0,r.kt)("p",null,"Inherit all configurations from ",(0,r.kt)("a",{parentName:"p",href:"/learning/use-request#api"},(0,r.kt)("strong",{parentName:"a"},"useRequest")),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialForm"),(0,r.kt)("td",{parentName:"tr",align:null},"initial form data"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"id"),(0,r.kt)("td",{parentName:"tr",align:null},"form id, the data data of the same id is the same reference, which can be used to share the same form data in multi-page forms. Single page form does not need to specify id"),(0,r.kt)("td",{parentName:"tr",align:null},"string","|","number"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"store"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to save data persistently, after setting to true, uncommitted data will be persisted in real time"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean","|"," ",(0,r.kt)("a",{parentName:"td",href:"#storedetailconfig"},"StoreDetailConfig")),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resetAfterSubmiting"),(0,r.kt)("td",{parentName:"tr",align:null},"reset data after submission"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h3",{id:"responsive-data"},"Responsive data"),(0,r.kt)("p",null,"Inherit all responsive data from ",(0,r.kt)("a",{parentName:"p",href:"/learning/use-request#api"},(0,r.kt)("strong",{parentName:"a"},"useRequest")),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"form"),(0,r.kt)("td",{parentName:"tr",align:null},"form data,determined by initialForm"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h4",{id:"storedetailconfig"},"StoreDetailConfig"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enable"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to enable persistent data"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"serializers"),(0,r.kt)("td",{parentName:"tr",align:null},"A collection of custom serializers, built-in serializers:",(0,r.kt)("br",null),"1. The date serializer is used to convert dates",(0,r.kt)("br",null),"2. The regexp serializer is used to convert regular expressions",(0,r.kt)("br",null),"Yes Override the built-in serializer by setting the serializer with the same name"),(0,r.kt)("td",{parentName:"tr",align:null},"Record<string","|","number, ",(0,r.kt)("a",{parentName:"td",href:"#dataserializer"},"DataSerializer"),">"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h4",{id:"dataserializer"},"DataSerializer"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Versionthis"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"forward"),(0,r.kt)("td",{parentName:"tr",align:null},"Serialization function, when serializing in forward, it needs to judge whether it is the specified data, and return the converted data, otherwise return undefined or not return"),(0,r.kt)("td",{parentName:"tr",align:null},"(data: any) => any","|","undefined","|","void"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"backward"),(0,r.kt)("td",{parentName:"tr",align:null},"deserialization function, deserialization data directly"),(0,r.kt)("td",{parentName:"tr",align:null},"(data: any) => any","|","undefined","|","void"),(0,r.kt)("td",{parentName:"tr",align:null},"required"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h3",{id:"action-function"},"Action function"),(0,r.kt)("p",null,"Inherit all action functions of ",(0,r.kt)("a",{parentName:"p",href:"/learning/use-request#api"},(0,r.kt)("strong",{parentName:"a"},"useRequest")),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"description"),(0,r.kt)("th",{parentName:"tr",align:null},"function parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"return value"),(0,r.kt)("th",{parentName:"tr",align:null},"version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"updateForm"),(0,r.kt)("td",{parentName:"tr",align:null},"Update one or more form data"),(0,r.kt)("td",{parentName:"tr",align:null},"newForm: Partial","<","F",">"," ","|"," (oldForm: F) => F)",(0,r.kt)("br",null)," F is ",(0,r.kt)("inlineCode",{parentName:"td"},"initialForm")," type"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reset"),(0,r.kt)("td",{parentName:"tr",align:null},"Reset to initialized data, if there is persistent data, it will also be cleared"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h3",{id:"event"},"Event"),(0,r.kt)("p",null,"Inherit all events from ",(0,r.kt)("a",{parentName:"p",href:"/learning/use-request#api"},(0,r.kt)("strong",{parentName:"a"},"useRequest")),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Callback Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onRestore"),(0,r.kt)("td",{parentName:"tr",align:null},"Triggered after the persistent data is restored"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))))}c.isMDXComponent=!0}}]);