"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[5259],{6273:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>q,contentTitle:()=>k,default:()=>A,frontMatter:()=>b,metadata:()=>y,toc:()=>I});var r=n(5893),a=n(1151),s=n(4866),o=n(5162),i=n(5502),l=n(9286);const d="<template>\r\n  <div v-if=\"loading\">Loading...</div>\r\n  <div v-else-if=\"error\">{{ error.message }}</div>\r\n  <span v-else>responseData: {{ data }}</span>\r\n</template>\r\n\r\n<script setup>\r\nimport { useRequest } from 'alova';\r\nimport { alovaInstance } from './api';\r\n\r\n// Use the alova instance to create a method and pass it to useRequest to send the request\r\nconst { loading, data, error } = useRequest(\r\n  alovaInstance.Get('https://jsonplaceholder.typicode.com/todos/1')\r\n);\r\n<\/script>",c="import { useRequest } from 'alova';\r\nimport { alovaInstance } from './api';\r\n\r\nconst App = () => {\r\n  // Use the alova instance to create a method and pass it to useRequest to send the request\r\n  const { loading, data, error } = useRequest(alovaInstance.Get('https://jsonplaceholder.typicode.com/todos/1'));\r\n\r\n  if (loading) {\r\n    return <div>Loading...</div>;\r\n  } else if (error) {\r\n    return <div>{error.message}</div>;\r\n  }\r\n  return <span>responseData: {JSON.stringify(data)}</span>;\r\n};\r\nexport default App;\r\n",p="<script>\r\nimport { useRequest } from 'alova';\r\nimport { alovaInstance } from './api';\r\n\r\n// Use the alova instance to create a method and pass it to useRequest to send the request\r\nconst { loading, data, error } = useRequest(alovaInstance.Get('https://jsonplaceholder.typicode.com/todos/1'));\r\n<\/script>\r\n\r\n{#if $loading}\r\n<div>Loading...</div>\r\n{:else if $error}\r\n<div>{ $error.message }</div>\r\n{:else}\r\n<span>responseData: { data }</span>\r\n{/if}",u="<template>\r\n  <div v-if=\"todo.loading\">Loading...</div>\r\n  <div v-else-if=\"todo.error\">{{ todo.error.message }}</div>\r\n  <span v-else>responseData: {{ todo.data }}</span>\r\n</template>\r\n\r\n<script>\r\nimport { mapAlovaHook } from '@alova/vue-options';\r\nimport { useRequest } from 'alova';\r\nimport { alovaInstance } from './api';\r\n\r\nexport default {\r\n  mixins: mapAlovaHook(function() {\r\n    return {\r\n      // Use the alova instance to create a method and pass it to useRequest to send the request\r\n      todo: useRequest(\r\n        alovaInstance.Get('https://jsonplaceholder.typicode.com/todos/1')\r\n      )\r\n    }\r\n  }),\r\n  data() {\r\n    return {}; \r\n  }\r\n}\r\n<\/script>",h='<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <script src="https://unpkg.com/vue@3/dist/vue.global.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/alova.umd.min.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/adapter/globalfetch.umd.min.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/hooks/vuehook.umd.min.js"><\/script>\r\n  </head>\r\n  <body>\r\n    <div id="app">\r\n      <div v-if="loading">Loading...</div>\r\n      <div v-else-if="error">{{ error.message }}</div>\r\n      <span v-else>responseData: {{ data }}</span>\r\n    </div>\r\n  </body>\r\n  <script>\r\n    const alovaInstance = alova.createAlova({\r\n      statesHook: VueHook,\r\n      requestAdapter: GlobalFetch(),\r\n      responded: response => response.json()\r\n    });\r\n\r\n    Vue.createApp({\r\n      setup() {\r\n        return alova.useRequest(alovaInstance.Get(\'https://jsonplaceholder.typicode.com/todos/1\'));\r\n      }\r\n    }).mount(\'#app\');\r\n  <\/script>\r\n</html>\r\n',v='<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <script src="https://unpkg.com/react@18/umd/react.development.js"><\/script>\r\n    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"><\/script>\r\n    <script src="https://unpkg.com/babel-standalone@6/babel.min.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/alova.umd.min.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/adapter/globalfetch.umd.min.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/hooks/reacthook.umd.min.js"><\/script>\r\n  </head>\r\n  <body>\r\n    <div id="app"></div>\r\n  </body>\r\n  <script type="text/babel">\r\n    const alovaInstance = alova.createAlova({\r\n      statesHook: ReactHook,\r\n      requestAdapter: GlobalFetch(),\r\n      responded: response => response.json()\r\n    });\r\n\r\n    const App = () => {\r\n      const { loading, data, error } = alova.useRequest(\r\n        alovaInstance.Get(\'https://jsonplaceholder.typicode.com/todos/1\')\r\n      );\r\n\r\n      if (loading) {\r\n        return <div>Loading...</div>;\r\n      } else if (error) {\r\n        return <div>{error.message}</div>;\r\n      }\r\n      return <span>responseData: {JSON.stringify(data)}</span>;\r\n    };\r\n    const root = ReactDOM.createRoot(document.getElementById(\'app\'));\r\n    root.render(<App />);\r\n  <\/script>\r\n</html>\r\n',m='<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <script src="https://unpkg.com/vue@2/dist/vue.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/alova.umd.min.js"><\/script>\r\n    <script src="https://unpkg.com/alova/dist/adapter/globalfetch.umd.min.js"><\/script>\r\n    <script src="https://unpkg.com/@alova/vue-options/dist/alova-vue-options.umd.min.js"><\/script>\r\n  </head>\r\n  <body>\r\n    <div id="app">\r\n      <div v-if="todo.loading">Loading...</div>\r\n      <div v-else-if="todo.error">{{ todo.error.message }}</div>\r\n      <span v-else>responseData: {{ todo.data }}</span>\r\n    </div>\r\n  </body>\r\n  <script>\r\n    const alovaInstance = alova.createAlova({\r\n      statesHook: AlovaVueOptions.VueOptionsHook,\r\n      requestAdapter: GlobalFetch(),\r\n      responded: response => response.json()\r\n    });\r\n\r\n    new Vue({\r\n      el: \'#app\',\r\n      mixins: AlovaVueOptions.mapAlovaHook(function () {\r\n        return {\r\n          todo: alova.useRequest(alovaInstance.Get(\'https://jsonplaceholder.typicode.com/todos/1\'))\r\n        };\r\n      }),\r\n      data() {\r\n        return {};\r\n      }\r\n    });\r\n  <\/script>\r\n</html>\r\n',j="<template>\r\n  <span>responseData: {{ data }}</span>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { alovaInstance } from './api';\r\n\r\nconst data = ref(null);\r\nalovaInstance.Get('https://jsonplaceholder.typicode.com/todos/1')\r\n  .then(response => response.text())\r\n  .then(text => {\r\n    data.value = text;\r\n  });\r\n<\/script>",x="import { useEffect, useState } from 'react';\r\nimport { alovaInstance } from './api';\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState(null);\r\n  useEffect(() => {\r\n    alovaInstance\r\n      .Get('https://jsonplaceholder.typicode.com/todos/1')\r\n      .then(response => response.text())\r\n      .then(text => {\r\n        setData(text);\r\n      });\r\n  }, []);\r\n\r\n  return <span>responseData: {data}</span>;\r\n};\r\nexport default App;\r\n",g="<script>\r\nimport { alovaInstance } from './api';\r\n\r\nlet data = null;\r\nalovaInstance\r\n  .Get('https://jsonplaceholder.typicode.com/todos/1')\r\n  .then(response => response.text())\r\n  .then(text => {\r\n    data = text;\r\n  });\r\n<\/script>\r\n<div>responseData: { data }</div>",f="<template>\r\n  <span>responseData: {{ data }}</span>\r\n</template>\r\n\r\n<script>\r\nimport { alovaInstance } from './api';\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      data: null\r\n    }\r\n  },\r\n  created() {\r\n    alovaInstance.Get('https://jsonplaceholder.typicode.com/todos/1')\r\n      .then(response => response.text())\r\n      .then(text => {\r\n        this.data = text;\r\n      });\r\n  }\r\n}\r\n<\/script>",b={title:"First request",sidebar_position:20},k=void 0,y={id:"tutorial/getting-started/first-request",title:"First request",description:"If you haven\u2019t konwn anything about alova yet, it is recommended that you read overview first.",source:"@site/docs/tutorial/02-getting-started/02-first-request.md",sourceDirName:"tutorial/02-getting-started",slug:"/tutorial/getting-started/first-request",permalink:"/tutorial/getting-started/first-request",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/02-getting-started/02-first-request.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"First request",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/tutorial/getting-started/overview"},next:{title:"request type and parameters",permalink:"/tutorial/getting-started/method"}},q={},I=[{value:"Install",id:"install",level:2},{value:"First create an alova instance",id:"first-create-an-alova-instance",level:2},{value:"Send request directly",id:"send-request-directly",level:2},{value:"Use useRequest to send a request",id:"use-userequest-to-send-a-request",level:2},{value:"Update state value",id:"update-state-value",level:3},{value:"UseHook usage specifications",id:"usehook-usage-specifications",level:3},{value:"Used in static html",id:"used-in-static-html",level:2},{value:"What\u2019s next?",id:"whats-next",level:2}];function R(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.admonition,{title:"Example tip",type:"tip",children:(0,r.jsxs)(t.p,{children:["If you haven\u2019t konwn anything about alova yet, it is recommended that you read ",(0,r.jsx)(t.a,{href:"/tutorial/getting-started/overview",children:"overview"})," first."]})}),"\n",(0,r.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(o.Z,{value:"1",label:"npm",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install alova --save\n"})})}),(0,r.jsx)(o.Z,{value:"2",label:"yarn",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"yarn add alova\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"first-create-an-alova-instance",children:"First create an alova instance"}),"\n",(0,r.jsxs)(s.Z,{groupId:"framework",children:[(0,r.jsx)(o.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\r\nimport VueHook from 'alova/vue';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\n\r\nexport const alovaInstance = createAlova({\r\n  statesHook: VueHook,\r\n  requestAdapter: GlobalFetch()\r\n});\n"})})}),(0,r.jsx)(o.Z,{value:"2",label:"react",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\r\nimport ReactHook from 'alova/react';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\n\r\nexport const alovaInstance = createAlova({\r\n  statesHook: ReactHook,\r\n  requestAdapter: GlobalFetch()\r\n});\n"})})}),(0,r.jsx)(o.Z,{value:"3",label:"svelte",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\r\nimport SvelteHook from 'alova/svelte';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\n\r\nexport const alovaInstance = createAlova({\r\n  statesHook: SvelteHook,\r\n  requestAdapter: GlobalFetch()\r\n});\n"})})}),(0,r.jsxs)(o.Z,{value:"4",label:"vue options",children:[(0,r.jsxs)(t.p,{children:["When used in vue options style, additional installation of the ",(0,r.jsx)(t.code,{children:"@alova/vue-options"})," package is required."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"import { createAlova } from 'alova';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\nimport { VueOptionsHook } from '@alova/vue-options';\r\n\r\nexport const alovaInstance = createAlova({\r\n  statesHook: VueOptionsHook,\r\n  requestAdapter: GlobalFetch()\r\n});\n"})})]})]}),"\n",(0,r.jsx)(t.p,{children:"When creating an alova instance, two parameters are specified:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"statesHook: Decide which UI library status to return when using useHook request. You can decide which statesHook to choose based on the UI framework used in the project."}),"\n",(0,r.jsxs)(t.li,{children:["requestAdapter: The request adapter used by the alova instance. It is recommended to use the ",(0,r.jsx)(t.code,{children:"GlobalFetch"})," request adapter here, which is based on the ",(0,r.jsx)(t.code,{children:"fetch API"})," package."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"send-request-directly",children:"Send request directly"}),"\n",(0,r.jsxs)(t.p,{children:["You can send a request through ",(0,r.jsx)(t.code,{children:"alovaInstance.Get"})," and pass the url. Since the ",(0,r.jsx)(t.code,{children:"GlobalFetch"})," request adapter is used, a ",(0,r.jsx)(t.code,{children:"Response"})," instance will be received. This is very simple."]}),"\n",(0,r.jsxs)(s.Z,{groupId:"framework",children:[(0,r.jsx)(o.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(i.Z,{template:"vue",mainFile:j,editorHeight:400,containBaseURL:!1,containResponded:!1})}),(0,r.jsx)(o.Z,{value:"2",label:"react",children:(0,r.jsx)(i.Z,{template:"react",mainFile:x,editorHeight:400,containBaseURL:!1,containResponded:!1})}),(0,r.jsx)(o.Z,{value:"3",label:"svelte",children:(0,r.jsx)(i.Z,{template:"svelte",mainFile:g,editorHeight:400,containBaseURL:!1,containResponded:!1})}),(0,r.jsx)(o.Z,{value:"4",label:"vue options",children:(0,r.jsx)(i.Z,{template:"vue",style:"options",mainFile:f,editorHeight:400,containBaseURL:!1,containResponded:!1})})]}),"\n",(0,r.jsxs)(t.p,{children:["You can also use ",(0,r.jsx)(t.code,{children:"await alovaInstance.Get"})," to wait for a response."]}),"\n",(0,r.jsxs)(t.admonition,{title:"version difference",type:"info",children:[(0,r.jsxs)(t.p,{children:["In versions before ",(0,r.jsx)(t.code,{children:"[v2.16.0]"}),", you need to call the ",(0,r.jsx)(t.code,{children:"send"})," function to send a request. If it is a version after ",(0,r.jsx)(t.code,{children:"[v2.16.0]"}),", you can ignore this reminder."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"alovaInstance\r\n  .Get('https://jsonplaceholder.typicode.com/todos/1')\r\n  .send()\r\n  .then(response => {\r\n    // ...\r\n  });\n"})})]}),"\n",(0,r.jsx)(t.h2,{id:"use-userequest-to-send-a-request",children:"Use useRequest to send a request"}),"\n",(0,r.jsxs)(t.p,{children:["The above is just the beginning. In enterprise-level projects, requests are often not so simple. We also need to display request status, upload and download status, handle request errors, etc. In order to more easily implement enterprise-level needs, alova combines the UI framework to make requests simpler. , you can use ",(0,r.jsx)(t.strong,{children:"useHooks"})," provided by alova to initiate a request. It will create multiple request-related responsive data such as ",(0,r.jsx)(t.code,{children:"loading/error/data"})," based on the specified ",(0,r.jsx)(t.code,{children:"statesHook"}),", and automatically manage them in alova. No need to maintain it yourself."]}),"\n",(0,r.jsxs)(s.Z,{groupId:"framework",children:[(0,r.jsx)(o.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(i.Z,{template:"vue",mainFile:d,editorHeight:400,containBaseURL:!1})}),(0,r.jsx)(o.Z,{value:"2",label:"react",children:(0,r.jsx)(i.Z,{template:"react",mainFile:c,editorHeight:400,containBaseURL:!1})}),(0,r.jsx)(o.Z,{value:"3",label:"svelte",children:(0,r.jsx)(l.Z,{language:"html",children:p})}),(0,r.jsx)(o.Z,{value:"4",label:"vue options",children:(0,r.jsx)(i.Z,{template:"vue",style:"options",mainFile:u,editorHeight:400,containBaseURL:!1})})]}),"\n",(0,r.jsxs)(t.p,{children:["In this example, pass ",(0,r.jsx)(t.code,{children:"alovaInstance.Get"})," into ",(0,r.jsx)(t.code,{children:"useRequest"}),", which will help us send the request and create responsive data ",(0,r.jsx)(t.code,{children:"loading/error/data"}),", and use them directly in the view."]}),"\n",(0,r.jsxs)(t.p,{children:["In order to receive the response data and assign to state ",(0,r.jsx)(t.code,{children:"data"}),", there is a simple global response interceptor added to ",(0,r.jsx)(t.code,{children:"alovaInstance"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const alovaInstance = createAlova({\r\n  // highlight-start\r\n  responded: response => response.json()\r\n  // highlight-end\r\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"update-state-value",children:"Update state value"}),"\n",(0,r.jsxs)(t.p,{children:["You can also change the states created by ",(0,r.jsx)(t.code,{children:"useRequest"}),"."]}),"\n",(0,r.jsxs)(s.Z,{groupId:"framework",children:[(0,r.jsx)(o.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { data, loading, error, update } = useRequest(todoListGetter);\r\n\r\n//...\r\n// update the data value directly\r\ndata.value = {};\r\n\r\n// or use function update\r\nupdate({\r\n  data: {}\r\n});\n"})})}),(0,r.jsxs)(o.Z,{value:"2",label:"react",children:[(0,r.jsxs)(t.p,{children:["In react, the returned state is data that can be used directly, so it needs to be modified by the ",(0,r.jsx)(t.code,{children:"update"})," function."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { data, loading, error, update } = useRequest(todoListGetter);\r\n\r\n//...\r\n// update the data value by update\r\nupdate({\r\n  data: {}\r\n});\n"})})]}),(0,r.jsxs)(o.Z,{value:"3",label:"svelte",children:[(0,r.jsxs)(t.p,{children:["In svelte, the status returned by ",(0,r.jsx)(t.code,{children:"useRequest"})," is of type ",(0,r.jsx)(t.code,{children:"writable"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { data, loading, error, update } = useRequest(todoListGetter);\r\n\r\n//...\r\n// update the data value directly\r\n$data = {};\r\n// or data.update(d => ({}));\r\n\r\n// or use function update\r\nupdate({\r\n  data: {}\r\n});\n"})})]}),(0,r.jsx)(o.Z,{value:"4",label:"vue options",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"export default {\r\n  mixins: mapAlovaHook(function () {\r\n    todo: useRequest(todoListGetter);\r\n  }),\r\n  methods: {\r\n    handleModifyTodo() {\r\n      // update the data value directly\r\n      this.todo.data = {};\r\n\r\n      // or use function update\r\n      this.todo.update({\r\n        data: {}\r\n      });\r\n    }\r\n  }\r\n};\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsxs)(t.a,{href:"/tutorial/best-practice/skills",children:["When to use useRequest and when to send requests via ",(0,r.jsx)(t.code,{children:"await alovaInstance.Get"})]}),"."]}),"\n",(0,r.jsx)(t.h3,{id:"usehook-usage-specifications",children:"UseHook usage specifications"}),"\n",(0,r.jsxs)(t.p,{children:["Please note that ",(0,r.jsx)(t.code,{children:"useRequest"})," can only be used to send requests within the component. Outside the component, you can send requests directly through the method instance, and the use of ",(0,r.jsx)(t.code,{children:"useRequest"})," needs to comply with the use hook usage rules, that is, it can only be called in the outermost layer of the function. ."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"\u274c\u274c\u274c It is not recommended to call"})," in a loop, conditional judgment or sub-function. For example, the following usage example in the click callback. When used in the callback function, although the request can be initiated normally, the response returned by use hook Formula data cannot be used in views, nor can it be used in loops and conditional judgments."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// \u274c bad\r\nconst handleClick = () => {\r\n  const { loading, data } = useRequest(getter);\r\n};\r\n\r\n// -------\r\n// \u2705 good\r\nconst { loading, data, send } = useRequest(getter, {\r\n  immediate: false\r\n});\r\nconst handleClick = () => {\r\n  send();\r\n};\n"})}),"\n",(0,r.jsx)(t.h2,{id:"used-in-static-html",children:"Used in static html"}),"\n",(0,r.jsxs)(t.p,{children:["In addition to installing alova using esModule, you can also use alova using the ",(0,r.jsx)(t.code,{children:"<script>"})," tag."]}),"\n",(0,r.jsxs)(s.Z,{groupId:"framework",children:[(0,r.jsx)(o.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(i.Z,{template:"static",mainFile:h,editorHeight:700})}),(0,r.jsx)(o.Z,{value:"2",label:"react",children:(0,r.jsx)(i.Z,{template:"static",mainFile:v,editorHeight:700})}),(0,r.jsx)(o.Z,{value:"3",label:"svelte",children:(0,r.jsx)(t.admonition,{type:"tip",children:(0,r.jsxs)(t.p,{children:["svelte relies on compilation tools and cannot be used directly through CDN. For details, see ",(0,r.jsx)(t.a,{href:"https://svelte.dev/",children:"svelte.dev"})]})})}),(0,r.jsx)(o.Z,{value:"4",label:"vue options",children:(0,r.jsx)(i.Z,{template:"static",mainFile:m,editorHeight:700})})]}),"\n",(0,r.jsx)(t.h2,{id:"whats-next",children:"What\u2019s next?"}),"\n",(0,r.jsx)(t.p,{children:"In fact, this is just the simplest sample code, but alova also includes rich features such as request and response interceptors, cache and state management, rich multi-scenario useHooks, etc. Let us continue to learn together."})]})}function A(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(R,{...e})}):R(e)}},5502:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(9020),a=n(3808),s=n(2949),o=n(5893);const i={vue:{root:"/src/App.vue",files:{"/src/api.js":"import { createAlova } from 'alova';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\nimport VueHook from 'alova/vue';\r\nexport const alovaInstance = createAlova({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n  statesHook: VueHook,\r\n  requestAdapter: GlobalFetch(),\r\n  responded: response => response.json()\r\n});\r\n"}},"vue-options":{root:"/src/App.vue",files:{"/src/api.js":"import { VueOptionsHook } from '@alova/vue-options';\r\nimport { createAlova } from 'alova';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\nexport const alovaInstance = createAlova({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n  statesHook: VueOptionsHook,\r\n  requestAdapter: GlobalFetch(),\r\n  responded: response => response.json()\r\n});\r\n"},deps:{"@alova/vue-options":"latest"}},react:{root:"/App.js",files:{"/api.js":"import { createAlova } from 'alova';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\nimport ReactHook from 'alova/react';\r\nexport const alovaInstance = createAlova({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n  statesHook: ReactHook,\r\n  requestAdapter: GlobalFetch(),\r\n  responded: response => response.json()\r\n});\r\n"}},svelte:{root:"/App.svelte",files:{"/api.js":"import { createAlova } from 'alova';\r\nimport GlobalFetch from 'alova/GlobalFetch';\r\nimport SvelteHook from 'alova/svelte';\r\nexport const alovaInstance = createAlova({\r\n  baseURL: 'https://jsonplaceholder.typicode.com',\r\n  statesHook: SvelteHook,\r\n  requestAdapter: GlobalFetch(),\r\n  responded: response => response.json()\r\n});\r\n"}},static:{root:"/index.html"}},l={svelte:e=>({files:{"/index.js":{code:'import App from "./App.svelte";    \n  const app = new App({\n    target: document.body\n  });\n  export default app;\n        ',hidden:!0},"/public/index.html":{code:'<!DOCTYPE html>\n  <html>\n    <head>\n      <meta charset="utf8" />\n      <meta name="viewport" content="width=device-width" />\n      <title>Svelte app</title>\n      <link rel="stylesheet" href="public/bundle.css" />\n    </head>\n    <body>\n      <script src="bundle.js"><\/script>\n    </body>\n  </html>',hidden:!0},...e.files},customSetup:{entry:"/index.js",dependencies:{svelte:"^3.59.2",...e.customSetup.dependencies}},main:"/App.svelte",environment:"svelte"})},d=e=>{let{template:t,mainFile:n,externalFiles:d={},containBaseURL:c=!0,containResponded:p=!0,editorHeight:u,style:h}=e;const v={light:a.A1,dark:a.cL},m=i[t+(h?`-${h}`:"")],j={[m.root]:n,...m.files?m.files:{},...d},x=Object.keys(j).find((e=>/api\.js$/.test(e)));j[x]&&(c||(j[x]=j[x].replace(/baseURL.+?\s{4}/,"")),p||(j[x]=j[x].replace(/,\s+responded.+json\(\)/,"")));const g={alova:"latest",...m.deps||{}},{colorMode:f}=(0,s.I)();let b={files:j,template:t,customSetup:{dependencies:g}};return b=l[t]?l[t](b):b,(0,o.jsx)(r.xR,{...b,theme:v[f],options:{editorWidthPercentage:70,editorHeight:u}})}}}]);