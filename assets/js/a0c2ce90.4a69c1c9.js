"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[9474],{2227:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>c});var s=r(5893),a=r(1151);const n={title:"request type and parameters",sidebar_position:30},i=void 0,o={id:"tutorial/getting-started/method",title:"request type and parameters",description:"In alova, each request corresponds to a method instance, which describes the URL, request headers, request parameters, and request behavior parameters of a request. It is a PromiseLike instance, so you can use await alovaInstance.Get(...) to trigger the request.",source:"@site/docs/tutorial/02-getting-started/03-method.md",sourceDirName:"tutorial/02-getting-started",slug:"/tutorial/getting-started/method",permalink:"/tutorial/getting-started/method",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/02-getting-started/03-method.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"request type and parameters",sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"First request",permalink:"/tutorial/getting-started/first-request"},next:{title:"Set baseURL",permalink:"/tutorial/getting-started/base-url"}},d={},c=[{value:"Request type",id:"request-type",level:2},{value:"Request parameters",id:"request-parameters",level:2},{value:"Set the parameters supported by the request adapter",id:"set-the-parameters-supported-by-the-request-adapter",level:2}];function l(e){const t={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["In alova, each request corresponds to a method instance, which describes the URL, request headers, request parameters, and request behavior parameters of a request. It is a PromiseLike instance, so you can use ",(0,s.jsx)(t.code,{children:"await alovaInstance.Get(...)"})," to trigger the request."]}),"\n",(0,s.jsx)(t.p,{children:"Next, let\u2019s take a look at the request type."}),"\n",(0,s.jsx)(t.h2,{id:"request-type",children:"Request type"}),"\n",(0,s.jsx)(t.p,{children:"alova provides 7 request types: GET, POST, PUT, DELETE, HEAD, OPTIONS, and PATCH."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Instance creation function"}),(0,s.jsx)(t.th,{children:"Parameters"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"GET"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Get(url[, config])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"POST"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Post(url[, data[, config]])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PUT"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Put(url[, data[, config]])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"DELETE"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Delete(url[, data[, config]])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"HEAD"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Head(url[, config])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"OPTIONS"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Options(url[, config])"})})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"PATCH"}),(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"alovaInstance.Patch(url[, data[, config]])"})})]})]})]}),"\n",(0,s.jsx)(t.p,{children:"Parameter Description:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"url"})," is the request path, which will be concatenated with ",(0,s.jsx)(t.code,{children:"baseURL"})," in ",(0,s.jsx)(t.code,{children:"createAlova"})," to form a complete url for request;"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"data"})," is the request body data object;"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"config"})," is the request configuration object, which includes configurations such as request headers, params parameters, request behavior parameters, etc.;"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"request-parameters",children:"Request parameters"}),"\n",(0,s.jsx)(t.p,{children:"For example, create a GET request method instance to obtain a todo list as follows. It specifies the request header and params parameters. The params parameters will be spliced in the form of ? after the url."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const todoListGetter = alovaInstance.Get('/todo/list', {\r\n  headers: {\r\n    'Content-Type': 'application/json;charset=UTF-8'\r\n  },\r\n  params: {\r\n    userId: 1\r\n  }\r\n});\n"})}),"\n",(0,s.jsx)(t.p,{children:"Then create a POST request Method instance to submit the todo item. At this time, the second parameter is passed in the request body. It is worth noting that the POST request can also pass in the params parameter."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"//Create Post instance\r\nconst createTodoPoster = alovaInstance.Post(\r\n  '/todo/create',\r\n  // The second parameter is http body data\r\n  {\r\n    title: 'test todo',\r\n    time: '12:00'\r\n  },\r\n  //The third parameter is to request configuration related information\r\n  {\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=UTF-8'\r\n    },\r\n    params: {\r\n      // ...\r\n    }\r\n  }\r\n);\n"})}),"\n",(0,s.jsx)(t.h2,{id:"set-the-parameters-supported-by-the-request-adapter",children:"Set the parameters supported by the request adapter"}),"\n",(0,s.jsxs)(t.p,{children:["In addition to request headers, params parameters, etc., it also supports configuring parameters supported by the corresponding request adapter. When using ",(0,s.jsx)(t.code,{children:"GlobalFetch"})," as the request adapter of alova, you can configure any ",(0,s.jsx)(t.code,{children:"fetch API"})," supported parameters on the ",(0,s.jsx)(t.code,{children:"method"})," instance. These Parameters will be passed to the ",(0,s.jsx)(t.code,{children:"fetch"})," function during request."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"const todoListGetter = alovaInstance.Get('/todo/list', {\r\n  // ...\r\n  // highlight-start\r\n  credentials: 'same-origin',\r\n  referrerPolicy: 'no-referrer',\r\n  mode: 'cors'\r\n  // highlight-end\r\n});\n"})}),"\n",(0,s.jsxs)(t.p,{children:["When the above ",(0,s.jsx)(t.code,{children:"method"})," instance sends a request through ",(0,s.jsx)(t.code,{children:"fetch"}),", it will be requested with the following parameters."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-javascript",children:"fetch('/todo/list', {\r\n  // ...\r\n  // highlight-start\r\n  credentials: 'same-origin',\r\n  referrerPolicy: 'no-referrer',\r\n  mode: 'cors'\r\n  // highlight-end\r\n});\n"})})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>o,a:()=>i});var s=r(7294);const a={},n=s.createContext(a);function i(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);