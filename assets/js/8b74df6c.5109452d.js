"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[5085],{9485:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var n=t(5893),i=t(1151);const c={title:"Invalidate Response Cache manually",sidebar_position:30},o=void 0,s={id:"tutorial/cache/manually-invalidate",title:"Invalidate Response Cache manually",description:"Generally, automatic invalidation cache is more concise, and it is recommended to use it first to invalidate the cache. When the automatic invalidation cache does not meet the needs, you can also invalidate the cache by calling invalidateCache.",source:"@site/docs/tutorial/03-cache/03-manually-invalidate.md",sourceDirName:"tutorial/03-cache",slug:"/tutorial/cache/manually-invalidate",permalink:"/tutorial/cache/manually-invalidate",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/03-cache/03-manually-invalidate.md",tags:[],version:"current",sidebarPosition:30,frontMatter:{title:"Invalidate Response Cache manually",sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Automatic cache invalidation",permalink:"/tutorial/cache/auto-invalidate"},next:{title:"Force request",permalink:"/tutorial/cache/force-request"}},l={},d=[{value:"Invalidate cache with method instance",id:"invalidate-cache-with-method-instance",level:2},{value:"Invalidate cache dynamically",id:"invalidate-cache-dynamically",level:2},{value:"Invalidate all caches",id:"invalidate-all-caches",level:2}];function r(e){const a={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:["Generally, automatic invalidation cache is more concise, and it is recommended to use it first to invalidate the cache. When the automatic invalidation cache does not meet the needs, you can also invalidate the cache by calling ",(0,n.jsx)(a.code,{children:"invalidateCache"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"invalidate-cache-with-method-instance",children:"Invalidate cache with method instance"}),"\n",(0,n.jsx)(a.p,{children:"In the invalidateCache function, a method instance is passed in, and it will always look for the cache under this instance to invalidate."}),"\n",(0,n.jsx)(a.p,{children:"In the following example, when the submission is successful, the todo details data cache will be invalidated."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"// Get the todo details data with id 1\r\nconst getTodoDetail = id =>\r\n  alovaInstance.Get(`/todo/${id}`, {\r\n    localCache: 1000000\r\n  });\r\nconst { loading, data } = useRequest(getTodoDetail(1));\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"// Submit the data and invalidate the todo details with id 1.\r\nconst {\r\n  // ...\r\n  send,\r\n  onSuccess\r\n} = useRequest(createTodoPoster, { immediate: false });\r\n\r\n// highlight-start\r\n//Invalid cache after successful submission\r\nonSuccess(() => {\r\n  invalidateCache(getTodoDetail(1));\r\n});\r\n// highlight-end\r\n\r\nconst handleSubmit = () => {\r\n  send({\r\n    title: 'new todo',\r\n    content: 'new todo content'\r\n  });\r\n};\n"})}),"\n",(0,n.jsx)(a.admonition,{type:"info",children:(0,n.jsxs)(a.p,{children:["Its function is far more than that. We can also invalidate any number or even all caches by setting ",(0,n.jsx)(a.code,{children:"Method"})," instance matchers."]})}),"\n",(0,n.jsx)(a.h2,{id:"invalidate-cache-dynamically",children:"Invalidate cache dynamically"}),"\n",(0,n.jsxs)(a.p,{children:["Maybe sometimes you are not sure which cache data needs to be invalidated, but you know how to find the cached data that needs to be invalidated. We can use ",(0,n.jsx)(a.a,{href:"/tutorial/advanced/method-matcher",children:"Method instance matcher"})," To dynamically find the corresponding method instance. The following example shows how to invalidate the cache for the first 5 Method instances named todoList."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"const getTodoList = currentPage => {\r\n  return alovaInstance.Get('/todo/list', {\r\n    // highlight-start\r\n    // First set the name for the method instance, which is used to filter out the required Method instance when the Method instance cannot be specified directly\r\n    name: 'todoList',\r\n    // highlight-end\r\n    params: {\r\n      currentPage,\r\n      pageSize: 10\r\n    }\r\n  });\r\n};\r\n\r\nconst {\r\n  //...\r\n  send,\r\n  onSuccess\r\n} = useRequest(createTodoPoster, { immediate: false });\r\n// After the submission is successful, the todo data cache on the first page will be invalidated\r\nonSuccess(() => {\r\n  // highlight-start\r\n  // Invalidate the cache of the first 5 Method instances named todoList\r\n  invalidateCache({\r\n    name: 'todoList',\r\n    filter: (method, index, ary) => {\r\n      return index < 5;\r\n    }\r\n  });\r\n  // highlight-end\r\n});\n"})}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsxs)(a.p,{children:["See ",(0,n.jsx)(a.a,{href:"/tutorial/advanced/method-matcher",children:"Method instance matcher"})," for more usage of ",(0,n.jsx)(a.code,{children:"Method"})," instance matcher"]}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"invalidate-all-caches",children:"Invalidate all caches"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"// When no parameters are passed, invalidate all response caches\r\ninvalidateCache();\n"})})]})}function h(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},1151:(e,a,t)=>{t.d(a,{Z:()=>s,a:()=>o});var n=t(7294);const i={},c=n.createContext(i);function o(e){const a=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(c.Provider,{value:a},e.children)}}}]);