"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[1692],{66059:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=a(85893),n=a(11151);const r={title:"Common middleware practices"},o=void 0,l={id:"tutorial/project/best-practice/middleware",title:"Common middleware practices",description:"Delay update loading",source:"@site/docs/tutorial/07-project/01-best-practice/05-middleware.md",sourceDirName:"tutorial/07-project/01-best-practice",slug:"/tutorial/project/best-practice/middleware",permalink:"/tutorial/project/best-practice/middleware",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/07-project/01-best-practice/05-middleware.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"Common middleware practices"},sidebar:"tutorial",previous:{title:"Multiple servers",permalink:"/tutorial/project/best-practice/multiple-servers"},next:{title:"Parallel Request",permalink:"/tutorial/project/best-practice/parallel-request"}},s={},d=[{value:"Delay update loading",id:"delay-update-loading",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h2,{id:"delay-update-loading",children:"Delay update loading"}),"\n",(0,i.jsx)(t.p,{children:"When the response is very fast, the loading status will flash once, which will bring a bad experience to the user. Delaying the loading update can make the loading status display after a period of time. If the response is completed within this period, it will not appear. Loading status. Let's implement a middleware with delayed update loading."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"const delayLoadingMiddleware =\n  (delayTimer = 1000) =>\n  async (ctx, next) => {\n    //Control loading by yourself\n    ctx.controlLoading();\n\n    //Delay updates for a specific time\n    const timer = setTimeout(() => {\n      ctx.update({ loading: true });\n    }, delayTimer);\n    await next();\n    ctx.update({ loading: false });\n    clearTimeout(timer);\n  };\n\nuseRequest(methodInstance, {\n  middleware: delayLoadingMiddleware()\n});\n"})})]})}function p(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,t,a)=>{a.d(t,{Z:()=>l,a:()=>o});var i=a(67294);const n={},r=i.createContext(n);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);