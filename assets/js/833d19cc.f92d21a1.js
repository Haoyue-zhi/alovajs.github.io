"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[8705],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),h=s(n),g=o,m=h["".concat(l,".").concat(g)]||h[g]||u[g]||a;return n?r.createElement(m,c(c({ref:t},p),{},{components:n})):r.createElement(m,c({ref:t},p))}));function g(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=h;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},4403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={title:"cache hit logger",sidebar_position:130},c=void 0,i={unversionedId:"next-step/cache-log",id:"next-step/cache-log",title:"cache hit logger",description:"v2.8.0+",source:"@site/docs/06-next-step/13-cache-log.md",sourceDirName:"06-next-step",slug:"/next-step/cache-log",permalink:"/next-step/cache-log",draft:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/06-next-step/13-cache-log.md",tags:[],version:"current",sidebarPosition:130,frontMatter:{title:"cache hit logger",sidebar_position:130},sidebar:"tutorialSidebar",previous:{title:"Error log",permalink:"/next-step/error-log"},next:{title:"Server-Side Rendering(SSR)",permalink:"/next-step/ssr"}},l={},s=[{value:"Turn off printing cache hit log",id:"turn-off-printing-cache-hit-log",level:2},{value:"Custom print cache hit log",id:"custom-print-cache-hit-log",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{title:"version required",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"v2.8.0+")),(0,o.kt)("p",null,"In order to facilitate debugging when using the interface cache, when the request hits the cache without sending a network request, the hit cache information will be printed on the console by default, which can solve some confusion when using the cache."),(0,o.kt)("p",null,"If you don't want to print cache information or custom control print cache information in some cases (such as production environment), alova also provides support for them."),(0,o.kt)("h2",{id:"turn-off-printing-cache-hit-log"},"Turn off printing cache hit log"),(0,o.kt)("p",null,"Console printing can be turned off by setting ",(0,o.kt)("inlineCode",{parentName:"p"},"cacheLogger")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"false or null")," when creating an alova instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const alovaInstance = createAlova({\n  //...\n  cacheLogger: false\n});\n")),(0,o.kt)("p",null,"You can also dynamically turn it on and off according to different environments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const alovaInstance = createAlova({\n  //...\n  // Enable cache hit logging in the development environment\n  cacheLogger: process.env.NODE_ENV === 'development'\n});\n")),(0,o.kt)("h2",{id:"custom-print-cache-hit-log"},"Custom print cache hit log"),(0,o.kt)("p",null,"The error log is printed by ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," by default. If ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," or other purposes are not supported in your project environment, ",(0,o.kt)("inlineCode",{parentName:"p"},"cacheLogger")," can be specified as a function to customize the log for processing cache hits."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const alovaInstance = createAlova({\n  //...\n  /**\n   * Custom cache hit log function\n   * @param response hit cache data\n   * @param method the current method instance\n   * @param cacheMode cache mode memory or restore\n   * @param tag The tag in the restore mode has a value only when the tag is set in the corresponding cache\n   */\n  cacheLogger(response, method, cacheMode, tag) {\n    saveHitCache({\n      response,\n      method,\n      cacheMode,\n      tag\n    });\n  }\n});\n")))}u.isMDXComponent=!0}}]);