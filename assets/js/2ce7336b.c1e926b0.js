"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[9040],{6073:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=s(85893),n=s(11151);const i={title:"Serial Request"},r=void 0,a={id:"tutorial/project/best-practice/serial-request",title:"Serial Request",description:"Use method",source:"@site/docs/tutorial/07-project/01-best-practice/07-serial-request.md",sourceDirName:"tutorial/07-project/01-best-practice",slug:"/tutorial/project/best-practice/serial-request",permalink:"/tutorial/project/best-practice/serial-request",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/07-project/01-best-practice/07-serial-request.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Serial Request"},sidebar:"tutorial",previous:{title:"Parallel Request",permalink:"/tutorial/project/best-practice/parallel-request"},next:{title:"l2-storage",permalink:"/tutorial/project/best-practice/l2-storage"}},c={},d=[{value:"Use method",id:"use-method",level:2},{value:"Use useRequest",id:"use-userequest",level:2},{value:"Method 1",id:"method-1",level:3},{value:"Method 2",id:"method-2",level:3}];function l(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"use-method",children:"Use method"}),"\n",(0,o.jsxs)(t.p,{children:["Since method is a PromiseLike instance, you can use ",(0,o.jsx)(t.code,{children:"await"})," to wait for the request to succeed."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const todoList = await todoListGetter;\nconst todoDetail = await todoDetailGetter(todoList[0].id);\n"})}),"\n",(0,o.jsx)(t.h2,{id:"use-userequest",children:"Use useRequest"}),"\n",(0,o.jsx)(t.p,{children:"Serial requests also have two modes."}),"\n",(0,o.jsx)(t.h3,{id:"method-1",children:"Method 1"}),"\n",(0,o.jsxs)(t.p,{children:["Let the first request be automatically sent, and the second request is triggered in the ",(0,o.jsx)(t.code,{children:"onSuccess"})," callback of the first request to complete the serial request. The serial request can be completed by writing as follows:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"//\nconst { data: todoList, onSuccess } = useRequest(todoListGetter);\nconst { data: todoDetail, send: sendTodoDetail } = useRequest(\n  todoId => todoDetailGetter(todoId),\n  { immediate: false }\n);\n\n// Get the list first, then get the details of the first todo\nonSuccess(event => {\n  sendTodoDetail(event.todoList[0].id);\n});\n"})}),"\n",(0,o.jsx)(t.h3,{id:"method-2",children:"Method 2"}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"send"})," function returned by the ",(0,o.jsx)(t.code,{children:"useRequest"})," function. Calling ",(0,o.jsx)(t.code,{children:"send"})," will return a usable promise object."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"// First, let them not automatically send requests\nconst { send: sendList } = useRequest(todoListGetter, { immediate: false });\nconst { send: sendTodoDetail } = useRequest(todoId => todoDetailGetter(todoId), {\n  immediate: false\n});\n\n// Use the promise object returned by the send function\nconst serialRequest = async () => {\n  const todoList = await sendList();\n  const todoDetail = await sendTodoDetail(todoList[0].id);\n  // Serial request completed, continue processing business...\n};\n"})})]})}function u(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>r});var o=s(67294);const n={},i=o.createContext(n);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);