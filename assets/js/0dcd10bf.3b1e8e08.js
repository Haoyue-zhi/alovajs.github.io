"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[3301],{1089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=n(5893),a=n(1151),s=n(4866),o=n(5162);const i={title:"Middleware",sidebar_position:40},l=void 0,c={id:"tutorial/advanced/middleware",title:"Middleware",description:"Request middleware is an asynchronous function. it provides a powerful ability to control almost all behaviors of a request. If you just use alova, then you probably don't need to use request middleware, because it is mainly used to complete custom request strategies, no matter simple or complex request strategies, you may use it, let's look at it next What magical powers does it have.",source:"@site/docs/tutorial/08-advanced/04-middleware.md",sourceDirName:"tutorial/08-advanced",slug:"/tutorial/advanced/middleware",permalink:"/tutorial/advanced/middleware",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/08-advanced/04-middleware.md",tags:[],version:"current",sidebarPosition:40,frontMatter:{title:"Middleware",sidebar_position:40},sidebar:"tutorialSidebar",previous:{title:"Custom Storage Adapter",permalink:"/tutorial/advanced/custom-storage-adapter"},next:{title:"Custom States Hook",permalink:"/tutorial/advanced/custom-stateshook"}},d={},u=[{value:"Middleware function",id:"middleware-function",level:2},{value:"Control response data",id:"control-response-data",level:2},{value:"change request",id:"change-request",level:2},{value:"Control errors",id:"control-errors",level:2},{value:"Catch errors",id:"catch-errors",level:3},{value:"Throw an error",id:"throw-an-error",level:3},{value:"Control response delay",id:"control-response-delay",level:2},{value:"More than that",id:"more-than-that",level:2},{value:"Included request information",id:"included-request-information",level:2},{value:"Modify responsive data",id:"modify-responsive-data",level:2},{value:"Decorate events",id:"decorate-events",level:2},{value:"Abort or repeat send request",id:"abort-or-repeat-send-request",level:2},{value:"Controlled loading state",id:"controlled-loading-state",level:2}];function h(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Request middleware is an asynchronous function. it provides a powerful ability to control almost all behaviors of a request. If you just use alova, then you probably don't need to use request middleware, because it is mainly used to complete custom request strategies, no matter simple or complex request strategies, you may use it, let's look at it next What magical powers does it have."}),"\n",(0,r.jsx)(t.h2,{id:"middleware-function",children:"Middleware function"}),"\n",(0,r.jsxs)(t.p,{children:["Request middleware is an async function, You can define request middleware in ",(0,r.jsx)(t.code,{children:"useRequest"}),", ",(0,r.jsx)(t.code,{children:"useWatcher"}),", ",(0,r.jsx)(t.code,{children:"useFetcher"}),". The following is a simple request middleware, which prints some information before and after the request without changing any request behavior."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useRequest(todoList, {\r\n  async middleware(_, next) {\r\n    console.log('before request');\r\n    await next();\r\n    console.log('after request');\r\n  }\r\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here are a few things you need to know about the ",(0,r.jsx)(t.code,{children:"next"})," function call. This function is also an asynchronous function. Calling it can continue to send requests. At this time, the ",(0,r.jsx)(t.em,{children:"loading"})," state will be set to true, and then the request will be sent. The return value of next is a Promise instance with the response data, you can manipulate the return value in the middleware function."]}),"\n",(0,r.jsx)(t.h2,{id:"control-response-data",children:"Control response data"}),"\n",(0,r.jsxs)(t.p,{children:["The return value of the middleware function will be used as the response data of this request to participate in subsequent processing. If the middleware does not return any data but calls ",(0,r.jsx)(t.code,{children:"next"}),", the response data of this request will be used for subsequent processing."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// The modified result will be used as the response data\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    const result = await next();\r\n    result.code = 500;\r\n    return result;\r\n  }\r\n});\r\n\r\n// Will participate in subsequent processing with the response data of this request\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    await next();\r\n  }\r\n});\r\n\r\n// will respond with the string abc\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    await next();\r\n    return 'abc';\r\n  }\r\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:["There is also a special case here. When ",(0,r.jsx)(t.code,{children:"next"})," is not called and there is no return value, subsequent processing will not be performed, which means that ",(0,r.jsx)(t.em,{children:"onSuccess"}),", ",(0,r.jsx)(t.em,{children:"onError"}),", ",(0,r.jsx)(t.em,{children:"onComplete"})," response events will not be triggered."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useRequest(todoList, {\r\n  async middleware() {}\r\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"change-request",children:"change request"}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes you want to change the request. At this time, you can specify another method instance in ",(0,r.jsx)(t.code,{children:"next"}),", and the information in this method will be requested when sending the request. At the same time, you can also set whether to force the request through ",(0,r.jsx)(t.code,{children:"next"})," Penetrating the cache is also very simple."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useRequest(todoList, {\r\n  async middleware(_, next) {\r\n    await next({\r\n      // Change the requested method instance\r\n      method: newMethodInstance,\r\n\r\n      // Whether to force the request this time\r\n      force: true\r\n    });\r\n  }\r\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"control-errors",children:"Control errors"}),"\n",(0,r.jsx)(t.h3,{id:"catch-errors",children:"Catch errors"}),"\n",(0,r.jsxs)(t.p,{children:["In the middleware, you can capture the request error generated in ",(0,r.jsx)(t.code,{children:"next"}),", after capturing, the global ",(0,r.jsx)(t.code,{children:"onError"})," hook will no longer be triggered."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useRequest(todoList, {\r\n  async middleware(_, next) {\r\n    try {\r\n      await next();\r\n    } catch (e) {\r\n      console.error('Error caught', e);\r\n    }\r\n  }\r\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"throw-an-error",children:"Throw an error"}),"\n",(0,r.jsx)(t.p,{children:"Of course, you can also throw a custom error in the middleware, even if the request is normal, it will enter the request error process."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// No request is sent, and global and request-level onError will be triggered at the same time. If the request is sent through `method.send`, the promise instance of rejection will be returned\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    throw new Error('error on before request');\r\n    await next();\r\n  }\r\n});\r\n\r\n// After request is success, global and request-level onError will be triggered at the same time. If the request is sent through `method.send`, the promise instance of rejection will be returned\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    await next();\r\n    throw new Error('error on after request');\r\n  }\r\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"control-response-delay",children:"Control response delay"}),"\n",(0,r.jsx)(t.p,{children:"In the middleware, we can delay the response or respond in advance. In the case of advance, although the response data cannot be obtained, some other data can be returned as the response data to participate in subsequent processing."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// Delay response for 1 second\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    await new Promise(resolve => {\r\n      setTimeout(resolve, 1000);\r\n    });\r\n    return next();\r\n  }\r\n});\r\n\r\n// Respond immediately and use the string abc as the response data\r\nuseRequest(todoList, {\r\n  async middleware(_, next) {\r\n    return 'abc';\r\n  }\r\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"more-than-that",children:"More than that"}),"\n",(0,r.jsxs)(t.p,{children:["**So far, all we have mentioned is the use of the second parameter ",(0,r.jsx)(t.code,{children:"next"})," of the middleware, so what is the first parameter for? **"]}),"\n",(0,r.jsxs)(t.p,{children:["The first parameter of the middleware contains some information about this request, as well as the control functions for the status and events returned in useHook such as ",(0,r.jsx)(t.code,{children:"loading"}),", ",(0,r.jsx)(t.code,{children:"data"})," and ",(0,r.jsx)(t.code,{children:"onSuccess"}),". Let's move on!"]}),"\n",(0,r.jsx)(t.h2,{id:"included-request-information",children:"Included request information"}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsxs)(o.Z,{value:"front",label:"front hooks",children:[(0,r.jsx)(t.p,{children:"The following is the request information contained in the middleware of useRequest and useWatcher"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFrontMiddleware(context, next) {\r\n  // The method instance of this request\r\n  context.method;\r\n\r\n  // The parameter array sent by the send function, the default is []\r\n  context.sendArgs;\r\n\r\n  // The cache data hit by this request\r\n  context.cachedResponse;\r\n\r\n  // configuration collection of useHook\r\n  context.config;\r\n\r\n  // The various states returned by useHook, including the following attributes\r\n  // loading, data, error, downloading, uploading, and additional states managed by managedStates\r\n  context.frontStates;\r\n  //...\r\n}\n"})})]}),(0,r.jsxs)(o.Z,{value:"fetch",label:"fetcher hook",children:[(0,r.jsx)(t.p,{children:"The following is the request information contained in the middleware of useFetcher"}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFetcherMiddleware(context, next) {\r\n  // The method instance of this request\r\n  context.method;\r\n\r\n  // The parameter group passed in by the fetch of useFetcher, the default is []\r\n  context.fetchArgs;\r\n\r\n  // The cache data hit by this request\r\n  context.cachedResponse;\r\n\r\n  // configuration collection of useHook\r\n  context.config;\r\n\r\n  // The various states returned by useHook, including the following attributes\r\n  // fetching, error, downloading, uploading\r\n  context.fetchStates;\r\n  //...\r\n}\n"})})]})]}),"\n",(0,r.jsx)(t.p,{children:"Next, let's take a look at what controls are available."}),"\n",(0,r.jsx)(t.h2,{id:"modify-responsive-data",children:"Modify responsive data"}),"\n",(0,r.jsxs)(t.p,{children:["Use ",(0,r.jsx)(t.code,{children:"context.update"})," to modify reactive data."]}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(o.Z,{value:"front",label:"front hooks",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFrontMiddleware(context, next) {\r\n  context.update({\r\n    // Modify the loading status to true in advance\r\n    loading: true,\r\n\r\n    // Modify the data value, such as setting custom initialization data\r\n    data: {\r\n      /* ... */\r\n    }\r\n  });\r\n  //...\r\n}\n"})})}),(0,r.jsx)(o.Z,{value:"fetch",label:"fetcher hook",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFetcherMiddleware(context, next) {\r\n  context.update({\r\n    // Modify the fetching status to true in advance\r\n    fetching: true,\r\n\r\n    // Modify the value of error\r\n    error: new Error('custom midleware error')\r\n  });\r\n  //...\r\n}\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"decorate-events",children:"Decorate events"}),"\n",(0,r.jsxs)(t.p,{children:["You can also decorate ",(0,r.jsx)(t.em,{children:"onSuccess"}),", ",(0,r.jsx)(t.em,{children:"onError"}),", ",(0,r.jsx)(t.em,{children:"onComplete"})," callback functions in middleware to make them richer, such as changing the parameters of the callback function, or receiving the return value of the callback function to achieve more functions."]}),"\n",(0,r.jsxs)(t.p,{children:["You can use ",(0,r.jsx)(t.code,{children:"decorateSuccess"}),", ",(0,r.jsx)(t.code,{children:"decorateError"}),", ",(0,r.jsx)(t.code,{children:"decorateComplete"})," functions to decorate callback functions. The following takes the success callback as an example, which is decorated in 3 places:"]}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Added ",(0,r.jsx)(t.code,{children:"custom"})," attribute to event object;"]}),"\n",(0,r.jsxs)(t.li,{children:["Added a second parameter to the success callback function, the value is ",(0,r.jsx)(t.code,{children:"extra data"}),";"]}),"\n",(0,r.jsx)(t.li,{children:"Receive the value of the second success callback function and print it;"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { onSuccess } = useRequest(todoList, {\r\n  //...\r\n  async middleware(context, next) {\r\n    // Decorate the successful callback function, the following function parameters are explained:\r\n    // handler: bound callback function\r\n    // event: the event object corresponding to the callback function\r\n    // index: The subscript of the callback function, indicating which callback function is currently being executed\r\n    // length: the number of callback functions bound\r\n    context.decorateSuccess((handler, event, index, length) => {\r\n      event.custom = 1;\r\n      const received = handler(event, 'extra data');\r\n      if (index === 1) {\r\n        console.log(`received the return value of ${index + 1} callback function:`, received);\r\n        // [Print information] Received the return value of the second callback function: I'm second handler\r\n      }\r\n    });\r\n    //...\r\n  }\r\n});\r\nonSuccess((event, extra) => {\r\n  console.log(event.custom); // 1\r\n  console.log(extra); // extra data\r\n});\r\nonSuccess((event, extra) => {\r\n  return \"I'm second handler\";\r\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:["The usage of ",(0,r.jsx)(t.code,{children:"decorateError"}),", ",(0,r.jsx)(t.code,{children:"decorateComplete"})," is the same as ",(0,r.jsx)(t.code,{children:"decorateSuccess"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"abort-or-repeat-send-request",children:"Abort or repeat send request"}),"\n",(0,r.jsxs)(t.p,{children:["In the middleware, you can also receive ",(0,r.jsx)(t.code,{children:"abort"})," and ",(0,r.jsx)(t.code,{children:"send"})," functions returned by use hooks (",(0,r.jsx)(t.code,{children:"fetch"})," in useFetcher), and you can also send multiple requests when triggering a request intent."]}),"\n",(0,r.jsxs)(t.p,{children:["A typical usage example is request retry. After sending a request, if the request fails, it will automatically request again according to a certain strategy, and ",(0,r.jsx)(t.code,{children:"onSuccess"})," will be triggered after the retry is successful. The following is a sample code for a simple request retry."]}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsx)(o.Z,{value:"front",label:"front hooks",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFrontMiddleware(context, next) {\r\n  return next().catch(error => {\r\n    if (needRetry) {\r\n      setTimeout(() => {\r\n        context.send(...context.sendArgs);\r\n      }, retryDelay);\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n}\n"})})}),(0,r.jsx)(o.Z,{value:"fetch",label:"fetcher hook",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFetcherMiddleware(context, next) {\r\n  return next().catch(error => {\r\n    if (needRetry) {\r\n      setTimeout(() => {\r\n        context.fetch(context.method, ...context.fetchArgs);\r\n      }, retryDelay);\r\n    }\r\n    return Promise.reject(error);\r\n  });\r\n}\n"})})})]}),"\n",(0,r.jsxs)(t.p,{children:["If you need to abort the request inside the middleware, you can call ",(0,r.jsx)(t.code,{children:"context.abort()"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"controlled-loading-state",children:"Controlled loading state"}),"\n",(0,r.jsxs)(t.p,{children:["In the above content, we know that you can customize and modify the responsive data through ",(0,r.jsx)(t.code,{children:"context.update"}),", but when you modify the loading status value (",(0,r.jsx)(t.code,{children:"loading"})," or ",(0,r.jsx)(t.code,{children:"fetching"}),"), it will be hindered, because in normal circumstances Next, the loading status value will be automatically set to true when ",(0,r.jsx)(t.code,{children:"next"})," is called, and false will be automatically set in the response process, which will overwrite the loading status value modified by ",(0,r.jsx)(t.code,{children:"context.update"}),", at this time we can turn on the controlled loading status , after it is turned on, the ",(0,r.jsx)(t.code,{children:"next"})," function and the response process will no longer modify the loading status value, but we have full control over it."]}),"\n",(0,r.jsx)(t.p,{children:"Let's take request retry as an example. We hope that the loading status will remain true after the request is retried until the request ends."}),"\n",(0,r.jsxs)(s.Z,{children:[(0,r.jsxs)(o.Z,{value:"front",label:"front hooks",children:[(0,r.jsxs)(t.p,{children:["In the middleware of useRequest and useWatcher, use ",(0,r.jsx)(t.code,{children:"context.controlLoading"})," to enable custom control loading status."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFrontMiddleware(context, next) {\r\n  context.controlLoading();\r\n\r\n  // Set to true when the request starts\r\n  context.update({ loading: true });\r\n  return next()\r\n    .then(value => {\r\n      // set to false after successful request\r\n      context.update({ loading: false });\r\n      return value;\r\n    })\r\n    .catch(error => {\r\n      if (needRetry) {\r\n        setTimeout(() => {\r\n          context.send(...context.sendArgs);\r\n        }, retryDelay);\r\n      } else {\r\n        // Also set to false when not retrying again\r\n        context.update({ loading: false });\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n}\n"})})]}),(0,r.jsxs)(o.Z,{value:"fetch",label:"fetcher hook",children:[(0,r.jsxs)(t.p,{children:["In the middleware of useFetching, use ",(0,r.jsx)(t.code,{children:"context.controlFetching"})," to enable custom control loading state."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"async function alovaFetcherMiddleware(context, next) {\r\n  context.controlFetching();\r\n\r\n  // Set to true when the request starts\r\n  context.update({ fetching: true });\r\n  return next()\r\n    .then(value => {\r\n      // set to false after successful request\r\n      context.update({ fetching: false });\r\n      return value;\r\n    })\r\n    .catch(error => {\r\n      if (needRetry) {\r\n        setTimeout(() => {\r\n          context.fetch(context.method, ...context.fetchArgs);\r\n        }, retryDelay);\r\n      } else {\r\n        // Also set to false when not retrying again\r\n        context.update({ fetching: false });\r\n      }\r\n      return Promise.reject(error);\r\n    });\r\n}\n"})})]})]})]})}function f(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>o});n(7294);var r=n(4334);const a={tabItem:"tabItem_Ymn6"};var s=n(5893);function o(e){let{children:t,hidden:n,className:o}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)(a.tabItem,o),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var r=n(7294),a=n(4334),s=n(2466),o=n(6550),i=n(469),l=n(1980),c=n(7392),d=n(12);function u(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function f(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function x(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=h(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!f({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[c,u]=m({queryString:n,groupId:a}),[x,p]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),g=(()=>{const e=c??x;return f({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{g&&l(g)}),[g]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!f({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),p(e)}),[u,p,s]),tabValues:s}}var p=n(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(5893);function b(e){let{className:t,block:n,selectedValue:r,selectValue:o,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),a=i[n].value;a!==r&&(c(t),o(a))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:u,onClick:d,...s,className:(0,a.Z)("tabs__item",g.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function j(e){let{lazy:t,children:n,selectedValue:a}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a})))})}function w(e){const t=x(e);return(0,v.jsxs)("div",{className:(0,a.Z)("tabs-container",g.tabList),children:[(0,v.jsx)(b,{...e,...t}),(0,v.jsx)(j,{...e,...t})]})}function y(e){const t=(0,p.Z)();return(0,v.jsx)(w,{...e,children:u(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>o});var r=n(7294);const a={},s=r.createContext(a);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);