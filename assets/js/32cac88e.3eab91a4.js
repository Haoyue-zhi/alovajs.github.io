"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[8641],{71349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>d});var a=n(85893),o=n(11151);n(74866),n(85162);const r={title:"Step 1 - Implement features with conservative requests"},s=void 0,i={id:"tutorial/client/strategy/seamless-data-interaction/conservative-request",title:"Step 1 - Implement features with conservative requests",description:"Take Todo management as an example to realize the creation, editing, deletion and other functions of Todo in the non-sense interaction mode, and the key code related to the request will be provided in the following chapters.",source:"@site/docs/tutorial/03-client/01-strategy/09-seamless-data-interaction/04-conservative-request.md",sourceDirName:"tutorial/03-client/01-strategy/09-seamless-data-interaction",slug:"/tutorial/client/strategy/seamless-data-interaction/conservative-request",permalink:"/tutorial/client/strategy/seamless-data-interaction/conservative-request",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/03-client/01-strategy/09-seamless-data-interaction/04-conservative-request.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Step 1 - Implement features with conservative requests"},sidebar:"tutorial",previous:{title:"Boot silent factory",permalink:"/tutorial/client/strategy/seamless-data-interaction/start-silent-factory"},next:{title:"Step 2 - Adjust Response Handling",permalink:"/tutorial/client/strategy/seamless-data-interaction/modify-response"}},l={},d=[{value:"Create an alova instance and related methods",id:"create-an-alova-instance-and-related-methods",level:2},{value:"Start the silent factory",id:"start-the-silent-factory",level:2},{value:"Load the Todo list",id:"load-the-todo-list",level:2},{value:"Enter the Todo creation/editing page",id:"enter-the-todo-creationediting-page",level:2},{value:"Create/Edit Todo Items",id:"createedit-todo-items",level:2},{value:"Delete Todo item",id:"delete-todo-item",level:2}];function c(e){const t={code:"code",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"Take Todo management as an example to realize the creation, editing, deletion and other functions of Todo in the non-sense interaction mode, and the key code related to the request will be provided in the following chapters."}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"useSQRequest"})," will be used to replace ",(0,a.jsx)(t.strong,{children:"useRequest"})," provided by alova, and then the most common conservative request mode will be implemented first, and then the process will be done step by step Interactive mode compatibility."]}),"\n",(0,a.jsx)(t.h2,{id:"create-an-alova-instance-and-related-methods",children:"Create an alova instance and related methods"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="api.js"',children:"import { createAlova } from 'alova';\n\nexport const alovaInst = createAlova({\n  /*...*/\n});\n\n/** Load todo list */\nconst todoList = () => alovaInst.Get('/todo');\n\n/** Load todo details */\nconst todoDetail = id =>\n  alovaInst.Get('/todo', {\n    params: { id }\n  });\n\n/** Create and edit todo items */\nconst createOrEditTodo = (data, id) =>\n  alovaInst.Post('/todo', {\n    data,\n    id\n  });\n\n/** Delete the todo item */\nconst deleteTodo = id => alovaInst.Delete('/todo', { id });\n"})}),"\n",(0,a.jsx)(t.h2,{id:"start-the-silent-factory",children:"Start the silent factory"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",metastring:'title="main.js"',children:"import { bootSilentFactory } from 'alova/client';\nimport { alovaInst } from './api.js';\n\nbootSilentFactory({\n  alova: alovaInst\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"load-the-todo-list",children:"Load the Todo list"}),"\n",(0,a.jsx)(t.p,{children:"Load and display page data in the simplest way"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { useSQRequest } from 'alova/client';\nimport { todoList } from './api.js';\nconst { data, loading, error } = useSQRequest(todoList, {\n  initialData: []\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"enter-the-todo-creationediting-page",children:"Enter the Todo creation/editing page"}),"\n",(0,a.jsx)(t.p,{children:"When creating a todo item, the id is empty, and no request for obtaining details is sent. When editing a todo item, if the id has a value, the detailed data will be obtained."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { useSQRequest } from 'alova/client';\nimport { todoDetail } from './api.js';\n\nconst id = /* todo id */;\nconst { loading, data } = useSQRequest(() => todoDetail(id), {\n   initialData: {\n     title: '',\n     time: new Date()\n   },\n   immediate: !!id\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"createedit-todo-items",children:"Create/Edit Todo Items"}),"\n",(0,a.jsx)(t.p,{children:"By submitting an event trigger request, after the submission is successful, call fetch to re-fetch the latest list data, and the interface will automatically display the latest data."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { useFetcher } from 'alova';\nimport { useSQRequest } from 'alova/client';\nimport { createOrEditTodo, todoList } from './api.js';\n\nconst id = /* todo id */;\nconst { loading, data, send, onSuccess } = useSQRequest(createOrEditTodo, {\n   immediate: false,\n});\n\nconst { fetch } = useFetcher();\nonSuccess(() => {\n   // Re-fetch list data\n   fetch(todoList);\n})\n\n// submit event callback function\nconst handleSubmit = newData => {\n   send(newData, id);\n};\n\n"})}),"\n",(0,a.jsx)(t.h2,{id:"delete-todo-item",children:"Delete Todo item"}),"\n",(0,a.jsx)(t.p,{children:"Delete the corresponding todo item by id"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"import { useSQRequest } from 'alova/client';\nimport { deleteTodo, todoList } from './api.js';\n\nconst { loading, data, send, onSuccess } = useSQRequest(deleteTodo, {\n  immediate: false\n});\n\nconst { fetch } = useFetcher();\nonSuccess(() => {\n  // Re-fetch list data\n  fetch(todoList);\n});\n\n// Event callback triggers delete request\nconst handleDelete = deletingId => {\n  send(deletingId);\n};\n"})}),"\n",(0,a.jsx)(t.p,{children:"So far, a simple Todo list management related request function has been completed, and then we will start to transform it to be compatible with the non-sense interaction mode."})]})}function u(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},85162:(e,t,n)=>{n.d(t,{Z:()=>s});n(67294);var a=n(90512);const o={tabItem:"tabItem_Ymn6"};var r=n(85893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,s),hidden:n,children:t})}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(67294),o=n(90512),r=n(12466),s=n(16550),i=n(20469),l=n(91980),d=n(67392),c=n(20812);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}(n);return function(e){const t=(0,d.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:n}=e;const o=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(o.location.search);t.set(r,e),o.replace({...o.location,search:t.toString()})}),[r,o])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,r=m(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[d,u]=p({queryString:n,groupId:o}),[f,v]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,r]=(0,c.Nk)(n);return[o,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:o}),b=(()=>{const e=d??f;return h({value:e,tabValues:r})?e:null})();(0,i.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),v(e)}),[u,v,r]),tabValues:r}}var v=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var g=n(85893);function j(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,r.o5)(),c=e=>{const t=e.currentTarget,n=l.indexOf(t),o=i[n].value;o!==a&&(d(t),s(o))},u=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,g.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:u,onClick:c,...r,className:(0,o.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function y(e){let{lazy:t,children:n,selectedValue:o}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===o));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function x(e){const t=f(e);return(0,g.jsxs)("div",{className:(0,o.Z)("tabs-container",b.tabList),children:[(0,g.jsx)(j,{...t,...e}),(0,g.jsx)(y,{...t,...e})]})}function w(e){const t=(0,v.Z)();return(0,g.jsx)(x,{...e,children:u(e.children)},String(t))}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var a=n(67294);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);