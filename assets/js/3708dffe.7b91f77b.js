"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[3992],{6436:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>h});var a=n(5893),r=n(1151),i=n(4866),s=n(5162);const l={title:"Pagination request strategy",sidebar_position:20},d=void 0,o={id:"tutorial/strategy/usePagination",title:"Pagination request strategy",description:"use hook",source:"@site/docs/tutorial/07-strategy/02-usePagination.md",sourceDirName:"tutorial/07-strategy",slug:"/tutorial/strategy/usePagination",permalink:"/tutorial/strategy/usePagination",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/07-strategy/02-usePagination.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"Pagination request strategy",sidebar_position:20},sidebar:"tutorialSidebar",previous:{title:"What more?",permalink:"/tutorial/strategy/sensorless-data-interaction/what-more"},next:{title:"Form submit strategy",permalink:"/tutorial/strategy/useForm"}},c={},h=[{value:"Example",id:"example",level:2},{value:"Features",id:"features",level:2},{value:"Install",id:"install",level:2},{value:"Usage",id:"usage",level:2},{value:"Display list data",id:"display-list-data",level:3},{value:"Specify pagination data",id:"specify-pagination-data",level:3},{value:"Enable append mode",id:"enable-append-mode",level:3},{value:"Preload adjacent page data",id:"preload-adjacent-page-data",level:3},{value:"Listening filter conditions",id:"listening-filter-conditions",level:3},{value:"Close initialization request",id:"close-initialization-request",level:3},{value:"List action functions",id:"list-action-functions",level:2},{value:"Insert list item",id:"insert-list-item",level:3},{value:"Remove list item",id:"remove-list-item",level:3},{value:"Update data items",id:"update-data-items",level:3},{value:"Refresh the data of the specified page",id:"refresh-the-data-of-the-specified-page",level:3},{value:"Manually update list data",id:"manually-update-list-data",level:3},{value:"Reset list",id:"reset-list",level:3},{value:"Limitation",id:"limitation",level:2},{value:"API",id:"api",level:2},{value:"Hook configuration",id:"hook-configuration",level:3},{value:"Responsive data",id:"responsive-data",level:3},{value:"Action function",id:"action-function",level:3},{value:"Event",id:"event",level:3}];function u(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.admonition,{title:"stragety type",type:"info",children:(0,a.jsx)(t.p,{children:"use hook"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsx)(t.p,{children:"Before using extension hooks, make sure you are familiar with basic usage of alova."}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"A hook designed for paging scenarios, which can help you automatically manage paging data, preload data, reduce unnecessary data refresh, improve fluency by 300%, and reduce coding difficulty by 50%**. You can use it in the two paging scenarios of pull-down loading and page number flipping. This hook provides a wealth of features to help your application create better performance and more convenient paging functions."}),"\n",(0,a.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"/tutorial/example/paginated-list",children:"page list"})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.a,{href:"/tutorial/example/load-more",children:"Pull down to load more"})}),"\n",(0,a.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"\u2728 Rich and comprehensive paging status;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728 Rich and comprehensive pagination events;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728 Change page, pageSize to automatically get specified paging data;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728Data caching, no need to repeatedly request list data of the same parameters;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728 Front and back pages are preloaded, no waiting for page turning;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728Search condition monitoring automatically reacquires pages;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728 Support adding, editing and deleting list data;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728 Support refreshing the data of the specified page without reset;"}),"\n",(0,a.jsx)(t.li,{children:"\u2728 Request-level search anti-shake, no need to maintain by yourself;"}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"install",children:"Install"}),"\n",(0,a.jsxs)(i.Z,{groupId:"framework",children:[(0,a.jsx)(s.Z,{value:"1",label:"vue composition",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# npm\r\nnpm install @alova/scene-vue --save\r\n#yarn\r\nyarn add @alova/scene-vue\r\n\n"})})}),(0,a.jsx)(s.Z,{value:"2",label:"react",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# npm\r\nnpm install @alova/scene-react --save\r\n#yarn\r\nyarn add @alova/scene-react\r\n\n"})})}),(0,a.jsx)(s.Z,{value:"3",label:"svelte",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"# npm\r\nnpm install @alova/scene-svelte --save\r\n#yarn\r\nyarn add @alova/scene-svelte\r\n\n"})})})]}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(t.h3,{id:"display-list-data",children:"Display list data"}),"\n",(0,a.jsxs)(i.Z,{groupId:"framework",children:[(0,a.jsx)(s.Z,{value:"1",label:"vue composition",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<template>\r\n  <div\r\n    v-for="item in data"\r\n    :key="item.id">\r\n    <span>{{ item.name }}</span>\r\n  </div>\r\n  <button @click="handlePrevPage">Previous page</button>\r\n  <button @click="handleNextPage">next page</button>\r\n  <button @click="handleSetPageSize">Set the number of pages</button>\r\n  <span>There are {{ pageCount }} pages</span>\r\n  <span>A total of {{ total }} data</span>\r\n</template>\r\n\r\n<script setup>\r\n  import { queryStudents } from \'./api.js\';\r\n  import { usePagination } from \'@alova/scene-vue\';\r\n\r\n  const {\r\n    // loading state\r\n    loading,\r\n\r\n    // list data\r\n    data,\r\n\r\n    // is it the last page\r\n    // This parameter can be used to determine whether it needs to be loaded during pull-down loading\r\n    isLastPage,\r\n\r\n    // The current page number, changing this page number will automatically trigger the request\r\n    page,\r\n\r\n    // Number of data items per page\r\n    pageSize,\r\n\r\n    // number of paging pages\r\n    pageCount,\r\n\r\n    // total amount of data\r\n    total\r\n  } = usePagination(\r\n    // Method instance acquisition function, it will receive page and pageSize, and return a Method instance\r\n    (page, pageSize) => queryStudents(page, pageSize),\r\n    {\r\n      // Initial data before the request (data format returned by the interface)\r\n      initialData: {\r\n        total: 0,\r\n        data: []\r\n      },\r\n      initialPage: 1, // initial page number, default is 1\r\n      initialPageSize: 10 // The initial number of data items per page, the default is 10\r\n    }\r\n  );\r\n\r\n  // Turn to the previous page, the request will be sent automatically after the page value changes\r\n  const handlePrevPage = () => {\r\n    page.value--;\r\n  };\r\n\r\n  // Turn to the next page, the request will be sent automatically after the page value changes\r\n  const handleNextPage = () => {\r\n    page.value++;\r\n  };\r\n\r\n  // Change the number of pages, the request will be sent automatically after the pageSize value is changed\r\n  const handleSetPageSize = () => {\r\n    pageSize.value = 20;\r\n  };\r\n<\/script>\n'})})}),(0,a.jsx)(s.Z,{value:"2",label:"react",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import { queryStudents } from './api.js';\r\nimport { usePagination } from '@alova/scene-react';\r\n\r\nconst App = () => {\r\n  const {\r\n    // loading state\r\n    loading,\r\n\r\n    // list data\r\n    data,\r\n\r\n    // is it the last page\r\n    // This parameter can be used to determine whether it needs to be loaded during pull-down loading\r\n    isLastPage,\r\n\r\n    // The current page number, changing this page number will automatically trigger the request\r\n    page: [page, setPage],\r\n\r\n    // Number of data items per page\r\n    pageSize: [page, setPageSize],\r\n\r\n    // number of paging pages\r\n    pageCount,\r\n\r\n    // total amount of data\r\n    total\r\n  } = usePagination(\r\n    // Method instance acquisition function, it will receive page and pageSize, and return a Method instance\r\n    (page, pageSize) => queryStudents(page, pageSize),\r\n    {\r\n      // Initial data before the request (data format returned by the interface)\r\n      initialData: {\r\n        total: 0,\r\n        data: []\r\n      },\r\n      initialPage: 1, // initial page number, default is 1\r\n      initialPageSize: 10 // The initial number of data items per page, the default is 10\r\n    }\r\n  );\r\n\r\n  // Turn to the previous page, the request will be sent automatically after the page value changes\r\n  const handlePrevPage = () => {\r\n    setPage(value => value - 1);\r\n  };\r\n\r\n  // Turn to the next page, the request will be sent automatically after the page value changes\r\n  const handleNextPage = () => {\r\n    setPage(value => value + 1);\r\n  };\r\n\r\n  // Change the number of pages, the request will be sent automatically after the pageSize value is changed\r\n  const handleSetPageSize = () => {\r\n    setPageSize(20);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {data.map(item => (\r\n        <div key={item.id}>\r\n          <span>{item.name}</span>\r\n        </div>\r\n      ))}\r\n      <button onClick={handlePrevPage}>Previous page</button>\r\n      <button onClick={handleNextPage}>Next Page</button>\r\n      <button onClick={handleSetPageSize}>Set the number per page</button>\r\n      <span>There are {pageCount} pages</span>\r\n      <span>A total of {total} pieces of data</span>\r\n    </div>\r\n  );\r\n};\n"})})}),(0,a.jsx)(s.Z,{value:"3",label:"svelte",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:'<script>\r\n  import { queryStudents } from \'./api.js\';\r\n  import { usePagination } from \'@alova/scene-svelte\';\r\n\r\n  const {\r\n    // loading state\r\n    loading,\r\n\r\n    // list data\r\n    data,\r\n\r\n    // is it the last page\r\n    // This parameter can be used to determine whether it needs to be loaded during pull-down loading\r\n    isLastPage,\r\n\r\n    // The current page number, changing this page number will automatically trigger the request\r\n    page,\r\n\r\n    // Number of data items per page\r\n    pageSize,\r\n\r\n    // number of paging pages\r\n    pageCount,\r\n\r\n    // total amount of data\r\n    total\r\n  } = usePagination(\r\n    // Method instance acquisition function, it will receive page and pageSize, and return a Method instance\r\n    (page, pageSize) => queryStudents(page, pageSize),\r\n    {\r\n      // Initial data before the request (data format returned by the interface)\r\n      initialData: {\r\n        total: 0,\r\n        data: []\r\n      },\r\n      initialPage: 1, // initial page number, default is 1\r\n      initialPageSize: 10 // The initial number of data items per page, the default is 10\r\n    }\r\n  );\r\n\r\n  // Turn to the previous page, the request will be sent automatically after the page value changes\r\n  const handlePrevPage = () => {\r\n    $page--;\r\n  };\r\n\r\n  // Turn to the next page, the request will be sent automatically after the page value changes\r\n  const handleNextPage = () => {\r\n    $page++;\r\n  };\r\n\r\n  // Change the number of pages, the request will be sent automatically after the pageSize value is changed\r\n  const handleSetPageSize = () => {\r\n    $pageSize = 20;\r\n  };\r\n<\/script>\r\n\r\n{#each $data as item}\r\n<div>\r\n  <span>{item.name}</span>\r\n</div>\r\n{/each}\r\n<button on:click="{handlePrevPage}">Previous page</button>\r\n<button on:click="{handleNextPage}">Next Page</button>\r\n<button on:click="{handleSetPageSize}">Set the number per page</button>\r\n<span>There are {pageCount} pages</span>\r\n<span>A total of {total} pieces of data</span>\n'})})})]}),"\n",(0,a.jsx)(t.h3,{id:"specify-pagination-data",children:"Specify pagination data"}),"\n",(0,a.jsxs)(t.p,{children:["The data structure returned by each paging data interface is different, so we need to tell ",(0,a.jsx)(t.code,{children:"usePagination"})," the list data and the total number of items separately, so as to help us manage the paging data."]}),"\n",(0,a.jsx)(t.p,{children:"Suppose the data format returned by your paging interface is as follows:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"interface PaginationData {\r\n  totalNumber: number;\r\n  list: any[];\r\n}\n"})}),"\n",(0,a.jsx)(t.p,{children:"At this point, you need to return the list data and the total number of items in the form of a function."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"usePagination((page, pageSize) => queryStudents(page, pageSize), {\r\n  //...\r\n  // highlight-start\r\n  total: response => response.totalNumber,\r\n  data: response => response.list\r\n  // highlight-end\r\n});\n"})}),"\n",(0,a.jsx)(t.p,{children:"If you don't specify the total and data callback functions, they will get data in the following ways by default."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"const total = response => response.total;\r\nconst data = response => response.data;\n"})}),"\n",(0,a.jsx)(t.admonition,{title:"Caution",type:"warning",children:(0,a.jsx)(t.p,{children:"The data callback function must return a list of data, indicating the data set used in paging, and total is mainly used to calculate the current page number. If no number is returned in the total callback function, it will pass whether the number of requested lists is less than the pageSize value To determine whether the current page is the last page, which is generally used for pull-down loading."})}),"\n",(0,a.jsx)(t.h3,{id:"enable-append-mode",children:"Enable append mode"}),"\n",(0,a.jsx)(t.p,{children:"By default, the original list data will be replaced when the page is turned, and the append mode will append the data of the next page to the bottom of the current list when the page is turned. A common usage scenario is to pull down to load more."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"usePagination((page, pageSize) => queryStudents(page, pageSize), {\r\n  //...\r\n  // highlight-start\r\n  append: true\r\n  // highlight-end\r\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"preload-adjacent-page-data",children:"Preload adjacent page data"}),"\n",(0,a.jsx)(t.p,{children:"In order to provide a better experience for pagination, when the previous and next pages of the current page meet the conditions, it will be automatically preloaded, so that when the user turns the page, the data can be displayed directly without waiting. This is the default behavior. If you don't want to preload the data of adjacent pages, you can turn it off in the following way."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"usePagination((page, pageSize) => queryStudents(page, pageSize), {\r\n  //...\r\n  // highlight-start\r\n  preloadPreviousPage: false, // turn off preloading previous page data\r\n  preloadNextPage: false // turn off preloading next page data\r\n  // highlight-end\r\n});\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In addition to ",(0,a.jsx)(t.code,{children:"onSuccess, onError, onComplete"})," request events, when preloading is triggered, you can also know the preloading status through ",(0,a.jsx)(t.code,{children:"fetching"}),", and you can also listen to preloading request events through ",(0,a.jsx)(t.code,{children:"onFetchSuccess, onFetchError, onFetchComplete"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"const {\r\n  // preload state\r\n  fetching,\r\n\r\n  // preload success event binding function\r\n  onFetchSuccess,\r\n\r\n  // preload error event binding function\r\n  onFetchError,\r\n\r\n  // Preloading complete event binding function\r\n  onFetchComplete\r\n} = usePagination((page, pageSize) => queryStudents(page, pageSize), {\r\n  //...\r\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"listening-filter-conditions",children:"Listening filter conditions"}),"\n",(0,a.jsxs)(t.p,{children:["In many cases, the list needs to be filtered by conditions. At this time, the re-request can be triggered through the status monitoring of ",(0,a.jsx)(t.code,{children:"usePagination"}),", which is the same as ",(0,a.jsx)(t.code,{children:"useWatcher"})," provided by alova."]}),"\n",(0,a.jsx)(t.p,{children:"For example, filter by student name, student grade."}),"\n",(0,a.jsxs)(i.Z,{groupId:"framework",children:[(0,a.jsx)(s.Z,{value:"1",label:"vue composition",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:"<template>\r\n  \x3c!-- highlight-start --\x3e\r\n  <input v-model=\"studentName\" />\r\n  <select v-model=\"clsName\">\r\n    <option value=\"1\">Class 1</option>\r\n    <option value=\"2\">Class 2</option>\r\n    <option value=\"3\">Class 3</option>\r\n  </select>\r\n  \x3c!-- highlight-end --\x3e\r\n  \x3c!-- ... --\x3e\r\n</template>\r\n\r\n<script setup>\r\n  import { ref } from 'vue';\r\n  import { queryStudents } from './api.js';\r\n  import { usePagination } from '@alova/scene-vue';\r\n\r\n  // search condition status\r\n  const studentName = ref('');\r\n  const clsName = ref('');\r\n  const {\r\n    //...\r\n  } = usePagination((page, pageSize) => queryStudents(page, pageSize, studentName.value, clsName.value), {\r\n    //...\r\n    // highlight-start\r\n    watchingStates: [studentName, clsName]\r\n    // highlight-end\r\n  });\r\n<\/script>\n"})})}),(0,a.jsx)(s.Z,{value:"2",label:"react",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-jsx",children:"import { queryStudents } from './api.js';\r\nimport { usePagination } from '@alova/scene-react';\r\n\r\nconst App = () => {\r\n   // search condition status\r\n   const [studentName, setStudentName] = useState('');\r\n   const [clsName, setClsName] = useState('');\r\n   const {\r\n     //...\r\n   } = usePagination(\r\n     (page, pageSize) => queryStudents(page, pageSize, studentName, clsName),\r\n     {\r\n       //...\r\n       // highlight-start\r\n       watchingStates: [studentName, clsName]\r\n       // highlight-end\r\n     }\r\n   );\r\n\r\n   return (\r\n     // highlight-start\r\n     <input value={studentName} onChange={({ target }) => setStudentName(target.value)} />\r\n     <select value={clsName} onChange={({ target }) => setClsName(target.value)}>\r\n       <option value=\"1\">Class 1</option>\r\n       <option value=\"2\">Class 2</option>\r\n       <option value=\"3\">Class 3</option>\r\n     </select>\r\n     // highlight-end\r\n     //...\r\n   );\r\n};\n"})})}),(0,a.jsx)(s.Z,{value:"3",label:"svelte",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-html",children:"<script>\r\n  import { queryStudents } from './api.js';\r\n  import { usePagination } from '@alova/scene-svelte';\r\n  import { writable } from 'svelte/store';\r\n\r\n  // search condition status\r\n  const studentName = writable('');\r\n  const clsName = writable('');\r\n  const {\r\n    //...\r\n  } = usePagination((page, pageSize) => queryStudents(page, pageSize, $studentName, $clsName), {\r\n    //...\r\n    // highlight-start\r\n    watchingStates: [studentName, clsName]\r\n    // highlight-end\r\n  });\r\n<\/script>\r\n\r\n\x3c!-- highlight-start --\x3e\r\n<input bind:value=\"{studentName}\" />\r\n<select bind:value=\"{clsName}\">\r\n  <option value=\"1\">Class 1</option>\r\n  <option value=\"2\">Class 2</option>\r\n  <option value=\"3\">Class 3</option>\r\n</select>\r\n\x3c!-- highlight-end --\x3e\r\n\x3c!-- ... --\x3e\n"})})})]}),"\n",(0,a.jsxs)(t.p,{children:["Same as ",(0,a.jsx)(t.code,{children:"useWatcher"}),", you can also implement request debounce by specifying ",(0,a.jsx)(t.code,{children:"debounce"}),", for details, please refer to ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-watcher",children:"useWatcher's debounce parameter setting"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"usePagination((page, pageSize) => queryStudents(page, pageSize, studentName, clsName), {\r\n  //...\r\n  // highlight-start\r\n  debounce: 300 // Anti-shake parameters, in milliseconds, can also be set as an array to set the anti-shake time separately for watchingStates\r\n  // highlight-end\r\n});\n"})}),"\n",(0,a.jsxs)(t.p,{children:["It should be noted that ",(0,a.jsx)(t.code,{children:"debounce"})," is achieved by request debounce in ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-watcher",children:(0,a.jsx)(t.strong,{children:"useWatcher"})}),". **At the end of the monitoring state, there are two hidden monitoring states of page and pageSize, which can also be set by debounce. **"]}),"\n",(0,a.jsxs)(t.p,{children:["For example, when ",(0,a.jsx)(t.code,{children:"watchingStates"})," is set to ",(0,a.jsx)(t.code,{children:"[studentName, clsName]"}),", ",(0,a.jsx)(t.code,{children:"[studentName, clsName, page, pageSize]"})," will be monitored internally, so if you need to set anti-shake for page and pageSize, you can specify ",(0,a.jsx)(t.code,{children:" [0, 0, 500, 500]"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"close-initialization-request",children:"Close initialization request"}),"\n",(0,a.jsxs)(t.p,{children:["By default, ",(0,a.jsx)(t.code,{children:"usePagination"})," will initiate a request during initialization, but you can also use ",(0,a.jsx)(t.code,{children:"immediate"})," to turn it off, and then pass the ",(0,a.jsx)(t.code,{children:"send"})," function, or change ",(0,a.jsx)(t.code,{children:"page"})," or ",(0,a.jsx)(t.code,{children:"pageSize"}),", and ",(0,a.jsx)(t.code,{children:"watchingStates"}),", etc. state to initiate the request."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"usePagination((page, pageSize) => queryStudents(page, pageSize, studentName, clsName), {\r\n  //...\r\n  // highlight-start\r\n  immediate: false\r\n  // highlight-end\r\n});\n"})}),"\n",(0,a.jsx)(t.h2,{id:"list-action-functions",children:"List action functions"}),"\n",(0,a.jsx)(t.p,{children:"usePagination provides a fully functional list action function, which can achieve the same effect as the re-request list without re-requesting the list, which greatly improves the interactive experience of the page. The specific function description continues to look down!"}),"\n",(0,a.jsx)(t.h3,{id:"insert-list-item",children:"Insert list item"}),"\n",(0,a.jsx)(t.p,{children:"You can use it to insert list items to any position in the list, and it will remove the last item after insertion to ensure the same effect as re-requesting the current page data."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Insert data\r\n * If no index is passed in, it will be inserted at the front by default\r\n * If a list item is passed in, it will be inserted after the list item, and an error will be thrown if the list item is not in the list data\r\n * @param item insert item\r\n * @param indexOrItem insertion position (index)\r\n */\r\ndeclare function insert(item: LD[number], indexOrItem?: number | LD[number]): void;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The following is an example of returning to the first page and then inserting list items in ",(0,a.jsx)(t.strong,{children:"non-append mode"})," (page number flipping scenario):"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"page.value = 1;\r\nnextTick(() => {\r\n  insert(newItem, 0);\r\n});\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The following is an example of scrolling to the top after inserting a list item in ",(0,a.jsx)(t.strong,{children:"append mode"})," (drop-down loading scene):"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"insert(newItem, 0);\r\nnextTick(() => {\r\n  window.scrollTo(0, {});\r\n});\n"})}),"\n",(0,a.jsxs)(t.p,{children:["You can also specify the second parameter of ",(0,a.jsx)(t.code,{children:"insert"})," as a list item. When the same reference of this list item is found, the insert item will be inserted after this list item."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-javascript",children:"insert(newItem, afterItem);\n"})}),"\n",(0,a.jsx)(t.admonition,{title:"Caution",type:"warning",children:(0,a.jsx)(t.p,{children:"In order to make the data correct, the insert function call will clear all caches."})}),"\n",(0,a.jsx)(t.h3,{id:"remove-list-item",children:"Remove list item"}),"\n",(0,a.jsxs)(t.p,{children:["In the case that the next page has a cache, it will use the cache of the next page to add to the end of the list item after removing an item, so as to ensure the same effect as re-requesting the data of the current page. In ",(0,a.jsx)(t.strong,{children:"append mode"})," and Behave the same in ",(0,a.jsx)(t.strong,{children:"non-append mode"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Remove data\r\n * If a list item is passed in, the list item will be removed, and an error will be thrown if the list item is not in the list data\r\n * @param position index or list item to remove\r\n */\r\ndeclare function remove(position: number | LD[number]): void;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["You can also specify the second parameter of ",(0,a.jsx)(t.code,{children:"remove"})," as a list item, and when the same reference of this list item is found, this list item will be removed."]}),"\n",(0,a.jsx)(t.p,{children:"But in the following two cases, it will re-initiate the request to refresh the data of the corresponding page:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:"The next page is not cached"}),"\n",(0,a.jsx)(t.li,{children:"The data that exceeds the next page cache list item is continuously called synchronously, and the cache data is not enough to supplement the current page list."}),"\n"]}),"\n",(0,a.jsx)(t.admonition,{title:"Caution",type:"warning",children:(0,a.jsx)(t.p,{children:"In order to make the data correct, the remove function call will clear all caches."})}),"\n",(0,a.jsx)(t.h3,{id:"update-data-items",children:"Update data items"}),"\n",(0,a.jsx)(t.p,{children:"Use this function when you want to update list items."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Replace data\r\n * If the position passed in is a list item, this list item will be replaced, if the list item is not in the list data, an error will be thrown\r\n * @param item replacement item\r\n * @param position replacement position (index) or list item\r\n */\r\ndeclare function replace(item: LD extends any[] ? LD[number] : any, position: number | LD[number]): void;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["You can also specify the second parameter of ",(0,a.jsx)(t.code,{children:"replace"})," as a list item, which will be replaced when an identical reference to the list item is found."]}),"\n",(0,a.jsx)(t.h3,{id:"refresh-the-data-of-the-specified-page",children:"Refresh the data of the specified page"}),"\n",(0,a.jsx)(t.p,{children:"When you do not want to update the list items locally after the data operation, but re-request the data on the server side, you can use refresh to refresh the data on any page, without resetting the list data and letting the user start browsing from the first page again."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Refresh the specified page number data, this function will ignore the cache to force the send request\r\n * If no page number is passed in, the current page will be refreshed\r\n * If a list item is passed in, the page where the list item is located will be refreshed\r\n * @param pageOrItemPage Refreshed page number or list item\r\n */\r\ndeclare function refresh(pageOrItemPage?: number | LD[number]): void;\n"})}),"\n",(0,a.jsxs)(t.p,{children:["In append mode, you can specify the parameter of ",(0,a.jsx)(t.code,{children:"refresh"})," as a list item. When the same reference of this list item is found, the data of the page number where this list item is located will be refreshed."]}),"\n",(0,a.jsx)(t.h3,{id:"manually-update-list-data",children:"Manually update list data"}),"\n",(0,a.jsxs)(t.p,{children:["Use the ",(0,a.jsx)(t.code,{children:"update"})," function to update responsive data, which is similar to ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-request",children:"useRequest's update"}),", the only difference is that when calling ",(0,a.jsx)(t.code,{children:"update"})," to update ",(0,a.jsx)(t.code,{children:"data"}),", the list data is updated, while non-response data. This is useful when manually clearing list data without reissuing the request."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// case list data\r\nupdate({\r\n  data: []\r\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"reset-list",children:"Reset list"}),"\n",(0,a.jsx)(t.p,{children:"It will clear all caches and reload the first page."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"/**\r\n * Reload the list from the first page and clear the cache\r\n */\r\ndeclare function reload(): void;\n"})}),"\n",(0,a.jsx)(t.h2,{id:"limitation",children:"Limitation"}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Cache placeholder mode"})," are temporarily disabled."]}),"\n",(0,a.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,a.jsx)(t.h3,{id:"hook-configuration",children:"Hook configuration"}),"\n",(0,a.jsxs)(t.p,{children:["Inherit all configurations of ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-watcher#api",children:(0,a.jsx)(t.strong,{children:"useWatcher"})}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Name"}),(0,a.jsx)(t.th,{children:"Description"}),(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{children:"Default"}),(0,a.jsx)(t.th,{children:"Version"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"initialPage"}),(0,a.jsx)(t.td,{children:"initial page number"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"1"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"initialPageSize"}),(0,a.jsx)(t.td,{children:"Initial number of data items per page"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"10"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"watchingStates"}),(0,a.jsx)(t.td,{children:"state monitoring trigger request, implemented using useWatcher"}),(0,a.jsx)(t.td,{children:"any[]"}),(0,a.jsx)(t.td,{children:"[page, pageSize]"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"debounce"}),(0,a.jsx)(t.td,{children:"The debounce parameter of state monitoring, implemented by useWatcher"}),(0,a.jsx)(t.td,{children:"number | number[]"}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"append"}),(0,a.jsx)(t.td,{children:"Whether to enable append mode"}),(0,a.jsx)(t.td,{children:"boolean"}),(0,a.jsx)(t.td,{children:"false"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"data"}),(0,a.jsx)(t.td,{children:"Array data specifying pagination"}),(0,a.jsx)(t.td,{children:"(response: any) => any[]"}),(0,a.jsx)(t.td,{children:"response => response.data"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"total"}),(0,a.jsx)(t.td,{children:"specify the total amount of data"}),(0,a.jsx)(t.td,{children:"(response: any) => number"}),(0,a.jsx)(t.td,{children:"response => response.total"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"preloadPreviousPage"}),(0,a.jsx)(t.td,{children:"whether to preload previous page data"}),(0,a.jsx)(t.td,{children:"boolean"}),(0,a.jsx)(t.td,{children:"true"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"preloadNextPage"}),(0,a.jsx)(t.td,{children:"whether to preload next page data"}),(0,a.jsx)(t.td,{children:"boolean"}),(0,a.jsx)(t.td,{children:"true"}),(0,a.jsx)(t.td,{children:"-"})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"responsive-data",children:"Responsive data"}),"\n",(0,a.jsxs)(t.p,{children:["Inherit all responsive data from ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-watcher#api",children:(0,a.jsx)(t.strong,{children:"useWatcher"})}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Name"}),(0,a.jsx)(t.th,{children:"Description"}),(0,a.jsx)(t.th,{children:"Type"}),(0,a.jsx)(t.th,{children:"Version"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"page"}),(0,a.jsx)(t.td,{children:"Current page number, determined by initialPage"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"pageSize"}),(0,a.jsx)(t.td,{children:"The current number of pages, determined by initialPageSize"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"data"}),(0,a.jsx)(t.td,{children:"paging list array data, obtained from data configuration"}),(0,a.jsx)(t.td,{children:"any[]"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"total"}),(0,a.jsx)(t.td,{children:"The total amount of data, obtained from total configuration, can be empty"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"pageCount"}),(0,a.jsx)(t.td,{children:"The total number of pages, calculated from total and pageSize"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"isLastPage"}),(0,a.jsx)(t.td,{children:"Whether the current page is the last page, if pageCount has a value, it will be obtained by comparing pageCount and page, otherwise it will be obtained by whether the length of the list data is less than pagSize"}),(0,a.jsx)(t.td,{children:"number"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"fetching"}),(0,a.jsx)(t.td,{children:"whether data is being preloaded"}),(0,a.jsx)(t.td,{children:"boolean"}),(0,a.jsx)(t.td,{children:"-"})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"action-function",children:"Action function"}),"\n",(0,a.jsxs)(t.p,{children:["Inherit all action functions of ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-watcher#api",children:(0,a.jsx)(t.strong,{children:"useWatcher"})}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"name"}),(0,a.jsx)(t.th,{children:"description"}),(0,a.jsx)(t.th,{children:"function parameters"}),(0,a.jsx)(t.th,{children:"return value"}),(0,a.jsx)(t.th,{children:"version"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"refresh"}),(0,a.jsx)(t.td,{children:"Refresh the data of the specified page number, this function will ignore the forced sending request of the cache, in the append mode, the list item can be passed in to indicate the page number where the list item is refreshed"}),(0,a.jsx)(t.td,{children:"pageOrItemPage: Refreshed page number or list item"}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"insert"}),(0,a.jsx)(t.td,{children:"Insert a piece of data. If no index is passed in, it will be inserted at the front by default. If a list item is passed in, it will be inserted after the list item. If the list item is not in the list data, an error will be thrown"}),(0,a.jsxs)(t.td,{children:["1. item: insert item",(0,a.jsx)("br",{}),"2. indexOrItem: insert position (index) or list item, default is 0"]}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"remove"}),(0,a.jsx)(t.td,{children:"Remove a piece of data. When a number is passed in, it means the removed index. When the position is passed in a list item, the list item will be removed. If the list item is not in the list data, an error will be thrown"}),(0,a.jsx)(t.td,{children:"position : remove position (index) or list item"}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"replace"}),(0,a.jsx)(t.td,{children:"Replace a piece of data. When the second parameter is passed in a number, it means the replacement index. A negative number means counting from the end. When the position passed in is a list item, the list item will be replaced. If the list item is not in the list data An error will be thrown"}),(0,a.jsxs)(t.td,{children:["1. item: replacement item",(0,a.jsx)("br",{}),"2. position: replacement position (index) or list item, when a negative number is passed in, it means counting from the end"]}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"reload"}),(0,a.jsx)(t.td,{children:"Clear the data and re-request the first page of data"}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"update"}),(0,a.jsx)(t.td,{children:"Update state data, same as alova's use hook, but update list data when updating data field"}),(0,a.jsx)(t.td,{children:"newFrontStates: new state data object"}),(0,a.jsx)(t.td,{children:"-"}),(0,a.jsx)(t.td,{children:"-"})]})]})]}),"\n",(0,a.jsx)(t.h3,{id:"event",children:"Event"}),"\n",(0,a.jsxs)(t.p,{children:["Inherit all events from ",(0,a.jsx)(t.a,{href:"/tutorial/learning/use-watcher#api",children:(0,a.jsx)(t.strong,{children:"useWatcher"})}),"."]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Name"}),(0,a.jsx)(t.th,{children:"Description"}),(0,a.jsx)(t.th,{children:"Callback Parameters"}),(0,a.jsx)(t.th,{children:"Version"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"onFetchSuccess"}),(0,a.jsx)(t.td,{children:"fetch success callback binding function"}),(0,a.jsx)(t.td,{children:"event: alova success event object"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"onFetchError"}),(0,a.jsx)(t.td,{children:"callback binding function for fetch failure"}),(0,a.jsx)(t.td,{children:"event: alova failure event object"}),(0,a.jsx)(t.td,{children:"-"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"onFetchComplete"}),(0,a.jsx)(t.td,{children:"callback binding function for fetch completion"}),(0,a.jsx)(t.td,{children:"event: alova completion event object"}),(0,a.jsx)(t.td,{children:"-"})]})]})]})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},5162:(e,t,n)=>{n.d(t,{Z:()=>s});n(7294);var a=n(4334);const r={tabItem:"tabItem_Ymn6"};var i=n(5893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,s),hidden:n,children:t})}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7294),r=n(4334),i=n(2466),s=n(6550),l=n(469),d=n(1980),o=n(7392),c=n(12);function h(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return h(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,o.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,d._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(r.location.search);t.set(i,e),r.replace({...r.location,search:t.toString()})}),[i,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,i=u(e),[s,d]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:i}))),[o,h]=g({queryString:n,groupId:r}),[m,x]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,i]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:r}),f=(()=>{const e=o??m;return p({value:e,tabValues:i})?e:null})();(0,l.Z)((()=>{f&&d(f)}),[f]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),h(e),x(e)}),[h,x,i]),tabValues:i}}var x=n(2389);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(5893);function b(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:l}=e;const d=[],{blockElementScrollPositionUntilNextRender:o}=(0,i.o5)(),c=e=>{const t=e.currentTarget,n=d.indexOf(t),r=l[n].value;r!==a&&(o(t),s(r))},h=e=>{let t=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const n=d.indexOf(e.currentTarget)+1;t=d[n]??d[0];break}case"ArrowLeft":{const n=d.indexOf(e.currentTarget)-1;t=d[n]??d[d.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:l.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,j.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>d.push(e),onKeyDown:h,onClick:c,...i,className:(0,r.Z)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function y(e){const t=m(e);return(0,j.jsxs)("div",{className:(0,r.Z)("tabs-container",f.tabList),children:[(0,j.jsx)(b,{...e,...t}),(0,j.jsx)(v,{...e,...t})]})}function w(e){const t=(0,x.Z)();return(0,j.jsx)(y,{...e,children:h(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>s});var a=n(7294);const r={},i=a.createContext(r);function s(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);