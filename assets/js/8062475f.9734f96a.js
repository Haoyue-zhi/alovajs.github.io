"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[8009],{9669:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>r,frontMatter:()=>c,metadata:()=>s,toc:()=>d});var n=t(85893),i=t(11151);const c={title:"Manual Invalidate"},l=void 0,s={id:"tutorial/cache/manually-invalidate",title:"Manual Invalidate",description:"Generally, automatic cache invalidation is more concise and is recommended to be used first to invalidate the cache. When automatic cache invalidation does not meet the needs, you can also invalidate the cache by calling invalidateCache.",source:"@site/docs/tutorial/05-cache/03-manually-invalidate.md",sourceDirName:"tutorial/05-cache",slug:"/tutorial/cache/manually-invalidate",permalink:"/tutorial/cache/manually-invalidate",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/05-cache/03-manually-invalidate.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Manual Invalidate"},sidebar:"tutorial",previous:{title:"Auto Invalidate",permalink:"/tutorial/cache/auto-invalidate"},next:{title:"Forced Request",permalink:"/tutorial/cache/force-request"}},o={},d=[{value:"Invalidate a single cache",id:"invalidate-a-single-cache",level:2},{value:"Invalidate multiple caches",id:"invalidate-multiple-caches",level:2},{value:"Dynamically invalidate cache",id:"dynamically-invalidate-cache",level:2},{value:"Invalidate all caches",id:"invalidate-all-caches",level:2}];function h(e){const a={a:"a",blockquote:"blockquote",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a.p,{children:["Generally, automatic cache invalidation is more concise and is recommended to be used first to invalidate the cache. When automatic cache invalidation does not meet the needs, you can also invalidate the cache by calling ",(0,n.jsx)(a.code,{children:"invalidateCache"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"invalidate-a-single-cache",children:"Invalidate a single cache"}),"\n",(0,n.jsxs)(a.p,{children:["Pass a method instance to the ",(0,n.jsx)(a.code,{children:"invalidateCache"})," function, and it will find the cache under this instance for invalidation."]}),"\n",(0,n.jsx)(a.p,{children:"In the following example, when the submission is successful, the cache of this todo detail data will be invalidated."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"// Get the todo detail data with id 1\nconst getTodoDetail = id =>\n  alovaInstance.Get(`/todo/${id}`, {\n    cacheFor: 600 * 1000\n  });\nconst { loading, data } = useRequest(getTodoDetail(1));\n"})}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"// Submit the data and invalidate the todo detail data with id 1.\nconst {\n  // ...\n  send,\n  onSuccess\n} = useRequest(createTodoPoster, { immediate: false });\n\n// highlight-start\n// Invalidate cache after successful submission\nonSuccess(() => {\n  invalidateCache(getTodoDetail(1));\n});\n// highlight-end\n\nconst handleSubmit = () => {\n  send({\n    title: 'new todo',\n    content: 'new todo content'\n  });\n}\uff1b\n"})}),"\n",(0,n.jsx)(a.h2,{id:"invalidate-multiple-caches",children:"Invalidate multiple caches"}),"\n",(0,n.jsx)(a.p,{children:"You can also pass in an array of method instances to invalidate multiple caches."}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"invalidateCache([method1, method2, ...]);\n"})}),"\n",(0,n.jsx)(a.h2,{id:"dynamically-invalidate-cache",children:"Dynamically invalidate cache"}),"\n",(0,n.jsxs)(a.p,{children:["Sometimes you may not be sure which cache data needs to be invalidated. We can use ",(0,n.jsx)(a.a,{href:"/tutorial/client/in-depth/method-matcher",children:"method snapshot matcher"})," to dynamically find the corresponding method instance. The following example shows how to invalidate the cache of the first five instances of a method called todoList."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"const getTodoList = currentPage => {\n  return alovaInstance.Get('/todo/list', {\n    // highlight-start\n    // Set the name for the method instance first, which is used to filter out the required Method instance when the Method instance cannot be directly specified\n    name: 'todoList',\n    // highlight-end\n    params: {\n      currentPage,\n      pageSize: 10\n    }\n  });\n};\n\nconst {\n  // ...\n  send,\n  onSuccess\n} = useRequest(createTodoPoster, { immediate: false });\n// After successful submission, the todo data cache of the first page is fixedly invalidated\nonSuccess(() => {\n  // highlight-start\n  // Invalidate the cache of the first 5 Method instances named todoList\n  const matchedMethods = alovaInstance.snapshots.match({\n    name: 'todoList',\n    filter: (method, index, ary) => {\n      return index < 5;\n    }\n  });\n  invalidateCache(matchedMethods);\n  // highlight-end\n});\n"})}),"\n",(0,n.jsxs)(a.blockquote,{children:["\n",(0,n.jsxs)(a.p,{children:["For more usage of method matchers, see ",(0,n.jsx)(a.a,{href:"/tutorial/client/in-depth/method-matcher",children:"method snapshot matcher"})]}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"invalidate-all-caches",children:"Invalidate all caches"}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-javascript",children:"// When no parameters are passed, invalidate all response caches\ninvalidateCache();\n"})})]})}function r(e={}){const{wrapper:a}={...(0,i.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},11151:(e,a,t)=>{t.d(a,{Z:()=>s,a:()=>l});var n=t(67294);const i={},c=n.createContext(i);function l(e){const a=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),n.createElement(c.Provider,{value:a},e.children)}}}]);