"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[2579],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||l;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(7462),r=n(7294),l=n(6010),i=n(2466),o=n(6550),s=n(1980),u=n(7392),d=n(12);function c(e){return function(e){var t;return(null==(t=r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})))?void 0:t.filter(Boolean))??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,o.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=p(e),[i,o]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,u]=h({queryString:n,groupId:a}),[c,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,d.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),k=(()=>{const e=s??c;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&o(k)}),[k]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,l]),tabValues:l}}var k=n(2389);const f="tabList__CuJ",v="tabItem_LNqP";function b(e){let{className:t,block:n,selectedValue:o,selectValue:s,tabValues:u}=e;const d=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),p=e=>{const t=e.currentTarget,n=d.indexOf(t),a=u[n].value;a!==o&&(c(t),s(a))},m=e=>{var t;let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}null==(t=n)||t.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:m,onClick:p},i,{className:(0,l.Z)("tabs__item",v,null==i?void 0:i.className,{"tabs__item--active":o===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function N(e){const t=g(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",f)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,k.Z)();return r.createElement(N,(0,a.Z)({key:String(t)},e))}},4983:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),l=n(4866),i=n(5162);const o={title:"Request when states Changed",sidebar_position:50},s=void 0,u={unversionedId:"tutorial/learning/use-watcher",id:"tutorial/learning/use-watcher",title:"Request when states Changed",description:"In some scenarios that need to be re-requested as the data changes, such as paging, data filtering, and fuzzy search, useWatcher can be used to monitor the specified state change and send the request immediately.",source:"@site/docs/tutorial/03-learning/04-use-watcher.md",sourceDirName:"tutorial/03-learning",slug:"/tutorial/learning/use-watcher",permalink:"/tutorial/learning/use-watcher",draft:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/03-learning/04-use-watcher.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{title:"Request when states Changed",sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Send request",permalink:"/tutorial/learning/use-request"},next:{title:"Data fetch",permalink:"/tutorial/learning/use-fetcher"}},d={},c=[{value:"Keyword Search",id:"keyword-search",level:2},{value:"pagination",id:"pagination",level:2},{value:"Manually send the request",id:"manually-send-the-request",level:2},{value:"Force send request",id:"force-send-request",level:2},{value:"Set static value",id:"set-static-value",level:3},{value:"Dynamically set the force value",id:"dynamically-set-the-force-value",level:3},{value:"Send function parameter passing rules",id:"send-function-parameter-passing-rules",level:2},{value:"useWatcher callback function",id:"usewatcher-callback-function",level:3},{value:"Received in onSuccess, onError, onComplete callback functions",id:"received-in-onsuccess-onerror-oncomplete-callback-functions",level:3},{value:"Received in the force function",id:"received-in-the-force-function",level:3},{value:"Set initial response data",id:"set-initial-response-data",level:2},{value:"Request anti-shake",id:"request-anti-shake",level:2},{value:"Set the anti-shake time of all monitoring states",id:"set-the-anti-shake-time-of-all-monitoring-states",level:3},{value:"Set the anti-shake time for a single monitoring state",id:"set-the-anti-shake-time-for-a-single-monitoring-state",level:3},{value:"Manually modify the status value",id:"manually-modify-the-status-value",level:2},{value:"Abort request manually",id:"abort-request-manually",level:2},{value:"API",id:"api",level:2},{value:"Hook configuration",id:"hook-configuration",level:3},{value:"Responsive data",id:"responsive-data",level:3},{value:"Action function",id:"action-function",level:3},{value:"Event",id:"event",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In some scenarios that need to be re-requested as the data changes, such as paging, data filtering, and fuzzy search, ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatcher")," can be used to monitor the specified state change and send the request immediately."),(0,r.kt)("h2",{id:"keyword-search"},"Keyword Search"),(0,r.kt)("p",null,"Next, let's take searching for todo items as an example."),(0,r.kt)(l.Z,{groupId:"framework",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"1",label:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<template>\n  \x3c!-- keyword changes as the input content changes --\x3e\n  <input v-model="keyword" />\n\n  \x3c!-- Render the filtered todo list --\x3e\n  <div v-if="loading">Loading...</div>\n  <template v-else>\n    <div v-for="todo in data">\n      <div class="todo-title">{{ todo.title }}</div>\n      <div class="todo-time">{{ todo.time }}</div>\n    </div>\n  </template>\n</template>\n\n<script setup>\n  // create method instance\n  const filterTodoList = keyword => {\n    return alovaInstance.Get(\'/todo/list/search\', {\n      params: {\n        keywords\n      }\n    });\n  };\n  const keyword = ref(\'\');\n  const {\n    loading,\n    data,\n    error\n\n    // The first parameter must be a function that returns a method instance\n  } = useWatcher(\n    () => filterTodoList(keyword.value),\n\n    // array of states being monitored, these state changes will trigger a request\n    [keyword],\n    {\n      // Set 500ms anti-shake, if the keyword changes frequently, only send the request 500ms after the change stops\n      debounce: 500\n    }\n  );\n<\/script>\n'))),(0,r.kt)(i.Z,{value:"2",label:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"// create method instance\nconst filterTodoList = keyword => {\n  return alovaInstance.Get('/todo/list/search', {\n    params: {\n      keywords\n    }\n  });\n};\n\nconst App = () => {\n  const [keyword, setKeyword] = useState('');\n  const {\n    loading,\n    data,\n    error\n    // The first parameter must be a function that returns a method instance\n  } = useWatcher(\n    () => filterTodoList(keyword),\n\n    // array of states being monitored, these state changes will trigger a request\n    [keyword],\n    {\n      // Set 500ms anti-shake, if the keyword changes frequently, only send the request 500ms after the change stops\n      debounce: 500\n    }\n  );\n\n  return (\n    <>\n      {/* keyword changes with input content */}\n      <input\n        value={keyword}\n        onInput={e => setKeyword(e.target.value)}\n      />\n\n      {/* Render the filtered todo list */}\n      {loading ? <div>Loading...</div> : null}\n      {!loading ? (\n        <>\n          {data.map(todo => (\n            <div>\n              <div class=\"todo-title\">{todo.title}</div>\n              <div class=\"todo-time\">{todo.time}</div>\n            </div>\n          ))}\n        </>\n      ) : null}\n    </>\n  );\n};\n"))),(0,r.kt)(i.Z,{value:"3",label:"svelte",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script>\n  import { writable } from \'svelte/store\';\n\n  // create method instance\n  const filterTodoList = text => {\n    return alovaInstance.Get(\'/todo/list/search\', {\n      params: {\n        keyword: text\n      }\n    });\n  };\n  const keyword = writable(\'\');\n\n  const {\n    loading,\n    data,\n    error\n\n    // The first parameter must be a function that returns a method instance\n  } = useWatcher(\n    () => filterTodoList($keyword),\n\n    // array of states being monitored, these state changes will trigger a request\n    [keyword],\n    {\n      // Set 500ms anti-shake, if the keyword changes frequently, only send the request 500ms after the change stops\n      debounce: 500\n    }\n  );\n\n  const updateKeyword = e => {\n    $keyword = e.target.value;\n  };\n<\/script>\n\x3c!-- keyword changes as the input content changes --\x3e\n<input\n  value="{$keyword}"\n  on:input="{updateKeyword}" />\n\n\x3c!-- Render the filtered todo list --\x3e\n{#if $loading}\n<div>Loading...</div>\n{:else} {#each $data as todo}\n<div>\n  <div class="todo-title">{ todo. title }</div>\n  <div class="todo-time">{ todo.time }</div>\n</div>\n{/each} {/if}\n')))),(0,r.kt)("h2",{id:"pagination"},"pagination"),(0,r.kt)("p",null,"Using the todo list pagination request as an example, you can do this."),(0,r.kt)(l.Z,{groupId:"framework",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"1",label:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<template>\n  \x3c!-- ... --\x3e\n</template>\n\n<script setup>\n  // method instance creation function\n  const getTodoList = currentPage => {\n    return alovaInstance.Get('/todo/list', {\n      params: {\n        currentPage,\n        pageSize: 10\n      }\n    });\n  };\n\n  const currentPage = ref(1);\n  const {\n    loading,\n    data,\n    error\n\n    // The first parameter is the function that returns the method instance, not the method instance itself\n  } = useWatcher(\n    () => getTodoList(currentPage.value),\n    // array of states being monitored, these state changes will trigger a request\n    [currentPage],\n    {\n      // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\n      // Manually set immediate to true to initially obtain the first page data\n      immediate: true\n    }\n  );\n<\/script>\n"))),(0,r.kt)(i.Z,{value:"2",label:"react",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react';\n\n// method instance creation function\nconst getTodoList = currentPage => {\n  return alovaInstance.Get('/todo/list', {\n    params: {\n      currentPage,\n      pageSize: 10\n    }\n  });\n};\n\nconst App = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const {\n    loading,\n    data,\n    error\n\n    // The first parameter is the function that returns the method instance, not the method instance itself\n  } = useWatcher(\n    () => getTodoList(currentPage),\n    // array of states being monitored, these state changes will trigger a request\n    [currentPage],\n    {\n      // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\n      // Manually set immediate to true to initially obtain the first page data\n      immediate: true\n    }\n  );\n\n  return {\n    /* ... */\n  };\n};\n"))),(0,r.kt)(i.Z,{value:"3",label:"svelte",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<script>\n  import { writable } from 'svelte/store';\n\n  // method instance creation function\n  const getTodoList = currentPage => {\n    return alovaInstance.Get('/todo/list', {\n      params: {\n        currentPage,\n        pageSize: 10\n      }\n    });\n  };\n\n  const currentPage = writable(1);\n  const {\n    loading,\n    data,\n    error\n\n    // The first parameter is the function that returns the method instance, not the method instance itself\n  } = useWatcher(\n    () => getTodoList($currentPage),\n    // array of states being monitored, these state changes will trigger a request\n    [currentPage],\n    {\n      // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\n      // Manually set immediate to true to initially obtain the first page data\n      immediate: true\n    }\n  );\n<\/script>\n\n\x3c!-- ... --\x3e\n")))),(0,r.kt)("h2",{id:"manually-send-the-request"},"Manually send the request"),(0,r.kt)("p",null,"Sometimes you want to resend the request when the monitoring state has not changed (for example, the server data has been updated), you can also manually trigger the request through the ",(0,r.kt)("inlineCode",{parentName:"p"},"send")," function, the usage is the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"useRequest"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  //...\n  // highlight-start\n  send\n  // highlight-end\n} = useWatcher(\n  () => getTodoList($currentPage),\n  // array of states being monitored, these state changes will trigger a request\n  [currentPage],\n  {\n    immediate: true\n  }\n);\n\n// highlight-start\nsend();\n// highlight-end\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"[2.9.0+]"),"In react, the send function is wrapped with ",(0,r.kt)("inlineCode",{parentName:"p"},"useCallback"),", and it is not limited by the closure trap. You can use it directly in the event without worrying about performance problems.")),(0,r.kt)("h2",{id:"force-send-request"},"Force send request"),(0,r.kt)("p",null,"Caching data can improve application fluency and reduce server pressure, but there is also the problem of data expiration. When you want to penetrate the cache to obtain the latest data, you can set the ",(0,r.kt)("inlineCode",{parentName:"p"},"force")," property in the configuration of use hooks. help you."),(0,r.kt)("h3",{id:"set-static-value"},"Set static value"),(0,r.kt)("p",null,"force is false by default. When set to true, the cache will be penetrated every time and a request will be sent"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"useWatcher(\n  () => alovaInstance.Get('/todo'),\n  [\n    /*watchingStates*/\n  ],\n  {\n    force: true\n  }\n);\n")),(0,r.kt)("h3",{id:"dynamically-set-the-force-value"},"Dynamically set the force value"),(0,r.kt)("p",null,"In actual situations, we often need to set whether to force the request to be sent according to different situations. At this time, force can be set as a function, which can be passed in through the send function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { send } = useWatcher(\n  alovaInstance.Get('/todo'),\n  [\n    /*watchingStates*/\n  ],\n  {\n    force: id => {\n      return !!id;\n    }\n  }\n);\nsend(1);\n")),(0,r.kt)("h2",{id:"send-function-parameter-passing-rules"},"Send function parameter passing rules"),(0,r.kt)("p",null,"In the above example, the send function is called to manually trigger the request, which can accept any number of parameters, and these parameters will be received by the following four functions:"),(0,r.kt)("h3",{id:"usewatcher-callback-function"},"useWatcher callback function"),(0,r.kt)("p",null,"The callback function of useWatcher can be received, as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { send } = useWatcher(currentPage => getTodoList(currentPage));\nsend(1); // currentPage in the above callback function will receive 1\n")),(0,r.kt)("h3",{id:"received-in-onsuccess-onerror-oncomplete-callback-functions"},"Received in onSuccess, onError, onComplete callback functions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"event.sendArgs")," in onSuccess, onError, and onComplete callback functions are received in the form of an array"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { send, onSuccess, onError, onComplete } = useWatcher(currentPage => getTodoList(currentPage));\nonSuccess(event => {\n  // The value of sendArgs is [1]\n  console.log(event.sendArgs);\n});\nonError(event => {\n  // The value of sendArgs is [1]\n  console.log(event.sendArgs);\n});\nonComplete(event => {\n  // The value of sendArgs is [1]\n  console.log(event.sendArgs);\n});\nsend(1);\n")),(0,r.kt)("h3",{id:"received-in-the-force-function"},"Received in the force function"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { send } = useWatcher(\n  alovaInstance.Get('/todo'),\n  [\n    /*watchingStates*/\n  ],\n  {\n    force: id => {\n      return !!id;\n    }\n  }\n);\nsend(1);\n")),(0,r.kt)("h2",{id:"set-initial-response-data"},"Set initial response data"),(0,r.kt)("p",null,"Before a page gets the initial data, it inevitably needs to wait for the response from the server. Before the response, it is generally necessary to initialize the state to an empty array or an empty object, so as not to cause an error on the page. We can set the second parameter to set the initial data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// You can also set the initial value of data in useWatcher\nconst {\n  // The initial value of data before the response is [], not undefined\n  data\n} = useWatcher(\n  () => getTodoList(/* parameter */),\n  [\n    /* Monitor status */\n  ],\n  {\n    initialData: []\n  }\n);\n")),(0,r.kt)("h2",{id:"request-anti-shake"},"Request anti-shake"),(0,r.kt)("p",null,"Usually we write anti-shake code at the level of frequently triggered events. This time we implemented the anti-shake function at the request level, which means that you no longer need to implement anti-shake yourself in the fuzzy search function, and the usage is very simple."),(0,r.kt)("admonition",{title:"Tips: What is function anti-shake",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Function debounce means that after an event is triggered, the function can only be executed once within n seconds. If an event is triggered again within n seconds after the event is triggered, the delayed execution time of the function will be recalculated (here and the function section To distinguish between streams, function throttling means that the event cannot be triggered again within a period of time after the event is triggered)")),(0,r.kt)("h3",{id:"set-the-anti-shake-time-of-all-monitoring-states"},"Set the anti-shake time of all monitoring states"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { loading, data, error } = useWatcher(() => filterTodoList(keyword, date), [keyword, date], {\n  // highlight-start\n  // When debounce is set to a number, it represents the anti-shake time of all listening states, in milliseconds\n  // As shown here, when one or more changes of status keyword and date, the request will be sent after 500ms\n  debounce: 500\n  // highlight-end\n});\n")),(0,r.kt)("h3",{id:"set-the-anti-shake-time-for-a-single-monitoring-state"},"Set the anti-shake time for a single monitoring state"),(0,r.kt)("p",null,"In many scenarios, we only need to stabilize some frequently changing monitoring states, such as state changes triggered by ",(0,r.kt)("inlineCode",{parentName:"p"},"onInput")," of a text box, we can do this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const { loading, data, error } = useWatcher(() => filterTodoList(keyword, date), [keyword, date], {\n  // highlight-start\n  // Set the anti-shake time respectively in the array order of the monitoring state, 0 or no transmission means no anti-shake\n  // The order of the monitoring status here is [keyword, date], and the anti-shake array is set to [500, 0], which means that the anti-shake is only set for the keyword alone\n  debounce: [500, 0]\n  // You can also set it as follows:\n  // debounce: [500],\n  // highlight-end\n});\n")),(0,r.kt)("h2",{id:"manually-modify-the-status-value"},"Manually modify the status value"),(0,r.kt)("p",null,"In alova, various states such as ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"loading"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatcher")," allow custom modification, which will become very convenient in some cases."),(0,r.kt)(l.Z,{groupId:"framework",mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"1",label:"vue",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const watchingState = ref('');\nconst { data, loading, error } = useWatcher(todoListGetter, [watchingState]);\n\n//...\n// Modify the data value directly\ndata.value = {};\n"))),(0,r.kt)(i.Z,{value:"2",label:"react",mdxType:"TabItem"},(0,r.kt)("p",null,"In react, the returned state is data that can be used directly, so it needs to be modified by the ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const [watchingState, setWatchingState] = useState('');\nconst { data, loading, error, update } = useWatcher(todoListGetter, [watchingState]);\n\n//...\n// Modify the data value through update\nupdate({\n  data: {}\n});\n"))),(0,r.kt)(i.Z,{value:"3",label:"svelte",mdxType:"TabItem"},(0,r.kt)("p",null,"In svelte, the status returned by ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatcher")," is of type ",(0,r.kt)("inlineCode",{parentName:"p"},"writable"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const watchingState = writable('');\nconst { data, loading, error } = useWatcher(todoListGetter, [watchingState]);\n\n//...\n// Modify the data value directly\n$data = {};\n// or data.update(d => ({}));\n")))),(0,r.kt)("admonition",{title:"Notes",type:"caution"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"The custom modified value will be overwritten by the internal state management mechanism of ",(0,r.kt)("inlineCode",{parentName:"li"},"useWatcher"),". For example, when you modify the value of ",(0,r.kt)("inlineCode",{parentName:"li"},"data"),", the value of ",(0,r.kt)("inlineCode",{parentName:"li"},"data")," will be assigned the latest response data after requesting again;"),(0,r.kt)("li",{parentName:"ol"},"The state value modified directly will not modify the cached data synchronously. If you need to modify the cached data synchronously, it is recommended to use ",(0,r.kt)("a",{parentName:"li",href:"../learning/update-response-data-across-modules"},"updateState")))),(0,r.kt)("h2",{id:"abort-request-manually"},"Abort request manually"),(0,r.kt)("p",null,"When the ",(0,r.kt)("inlineCode",{parentName:"p"},"timeout")," parameter is not set, the request will never time out. If you need to manually interrupt the request, you can receive the ",(0,r.kt)("inlineCode",{parentName:"p"},"abort")," method when the ",(0,r.kt)("inlineCode",{parentName:"p"},"useWatcher")," function is called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const {\n  //...\n  // highlight-start\n  // abort function is used to interrupt request\n  abort\n  // highlight-end\n} = useWatcher(() => filterTodoList(keyword), [keyword]);\n\n// highlight-start\n// Call abort to interrupt the request\nconst handleCancel = () => {\n  abort();\n};\n// highlight-end\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"[2.9.0+]"),"In react, the abort function is wrapped with ",(0,r.kt)("inlineCode",{parentName:"p"},"useCallback"),", and it is not limited by the closure trap. You can use it directly in the event without worrying about performance problems.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"[2.6.2+]"),"In addition, this ",(0,r.kt)("inlineCode",{parentName:"p"},"abort")," function will also be bound to the current method instance, so you can also call ",(0,r.kt)("inlineCode",{parentName:"p"},"abort")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeRequest")," to abort the request."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const alovaInst = createAlova({\n  //...\n  beforeRequest(method) {\n    if (someCondition) {\n      method.abort();\n    }\n  }\n});\n")),(0,r.kt)("h2",{id:"api"},"API"),(0,r.kt)("h3",{id:"hook-configuration"},"Hook configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"immediate"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to initiate the request immediately"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"initialData"),(0,r.kt)("td",{parentName:"tr",align:null},"The initial data value, the data value is the initial value before the first response, ",(0,r.kt)("inlineCode",{parentName:"td"},"undefined")," if not set"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"force"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to force the request, it can be set as a function to dynamically return a boolean value"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean ","|"," (...args: any[]) => boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"managedStates"),(0,r.kt)("td",{parentName:"tr",align:null},"Additional managed states, can be updated via updateState"),(0,r.kt)("td",{parentName:"tr",align:null},"Record","<","string ","|"," number ","|"," symbol, any",">"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"debounce"),(0,r.kt)("td",{parentName:"tr",align:null},"Request debounce time (milliseconds), when passing in the array, you can set the debounce time separately according to the order of watchingStates"),(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"number[]"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"middleware"),(0,r.kt)("td",{parentName:"tr",align:null},"Middleware function, ",(0,r.kt)("a",{parentName:"td",href:"../advanced/middleware"},"Learn about alova middleware")),(0,r.kt)("td",{parentName:"tr",align:null},"(context: ",(0,r.kt)("a",{parentName:"td",href:"../learning/use-request/#alovafrontmiddlewarecontext"},"AlovaFrontMiddlewareContext"),", next: ",(0,r.kt)("a",{parentName:"td",href:"../learning/use-request/#alovaguardnext"},"AlovaGuardNext"),") => Promise","<","any",">"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"responsive-data"},"Responsive data"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loading"),(0,r.kt)("td",{parentName:"tr",align:null},"request loading status"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"response data"),(0,r.kt)("td",{parentName:"tr",align:null},"any"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"error"),(0,r.kt)("td",{parentName:"tr",align:null},"request error message"),(0,r.kt)("td",{parentName:"tr",align:null},"Error ","|"," undefined"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"downloading"),(0,r.kt)("td",{parentName:"tr",align:null},"download progress information"),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"uploading"),(0,r.kt)("td",{parentName:"tr",align:null},"upload progress information"),(0,r.kt)("td",{parentName:"tr",align:null},"Object"),(0,r.kt)("td",{parentName:"tr",align:null},"-")))),(0,r.kt)("h3",{id:"action-function"},"Action function"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"name"),(0,r.kt)("th",{parentName:"tr",align:null},"description"),(0,r.kt)("th",{parentName:"tr",align:null},"function parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"return value"),(0,r.kt)("th",{parentName:"tr",align:null},"version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"send"),(0,r.kt)("td",{parentName:"tr",align:null},"send request function"),(0,r.kt)("td",{parentName:"tr",align:null},"...args: any[]"),(0,r.kt)("td",{parentName:"tr",align:null},"Promise"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"abort"),(0,r.kt)("td",{parentName:"tr",align:null},"interrupt function"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"update"),(0,r.kt)("td",{parentName:"tr",align:null},"A function to update the front-end state of the current use hook, more useful in react"),(0,r.kt)("td",{parentName:"tr",align:null},"newFrontStates: ",(0,r.kt)("a",{parentName:"td",href:"../learning/use-request/#frontrequeststate"},"FrontRequestState")),(0,r.kt)("td",{parentName:"tr",align:null},"-"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h3",{id:"event"},"Event"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Callback Parameters"),(0,r.kt)("th",{parentName:"tr",align:null},"Version"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onSuccess"),(0,r.kt)("td",{parentName:"tr",align:null},"request success event binding"),(0,r.kt)("td",{parentName:"tr",align:null},"event: ",(0,r.kt)("a",{parentName:"td",href:"../learning/use-request/#alovasuccessevent"},"AlovaSuccessEvent")),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onError"),(0,r.kt)("td",{parentName:"tr",align:null},"request error event binding"),(0,r.kt)("td",{parentName:"tr",align:null},"event: ",(0,r.kt)("a",{parentName:"td",href:"../learning/use-request/#alovaerrorevent"},"AlovaErrorEvent")),(0,r.kt)("td",{parentName:"tr",align:null},"-")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"onComplete"),(0,r.kt)("td",{parentName:"tr",align:null},"request complete event binding"),(0,r.kt)("td",{parentName:"tr",align:null},"event: ",(0,r.kt)("a",{parentName:"td",href:"../learning/use-request/#alovacompleteevent"},"AlovaCompleteEvent")),(0,r.kt)("td",{parentName:"tr",align:null},"-")))))}m.isMDXComponent=!0}}]);