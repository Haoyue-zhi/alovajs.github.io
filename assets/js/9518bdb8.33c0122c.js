"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[1737],{83250:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var o=s(85893),n=s(11151);const r={title:"Parallel Request"},l=void 0,a={id:"tutorial/project/best-practice/parallel-request",title:"Parallel Request",description:"Use method",source:"@site/docs/tutorial/07-project/01-best-practice/06-parallel-request.md",sourceDirName:"tutorial/07-project/01-best-practice",slug:"/tutorial/project/best-practice/parallel-request",permalink:"/tutorial/project/best-practice/parallel-request",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/07-project/01-best-practice/06-parallel-request.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"Parallel Request"},sidebar:"tutorial",previous:{title:"Common middleware practices",permalink:"/tutorial/project/best-practice/middleware"},next:{title:"Serial Request",permalink:"/tutorial/project/best-practice/serial-request"}},i={},c=[{value:"Use method",id:"use-method",level:2},{value:"Use useRequest",id:"use-userequest",level:2},{value:"Method 1",id:"method-1",level:3},{value:"Method 2",id:"method-2",level:3}];function u(e){const t={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,n.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"use-method",children:"Use method"}),"\n",(0,o.jsxs)(t.p,{children:["Since method is a PromiseLike instance, to send parallel requests through method, you only need to use ",(0,o.jsx)(t.code,{children:"Promise.all"})," to wait."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const [todoList, todoCounter] = await Promise.all[(todoListGetter, todoCountGetter)];\n"})}),"\n",(0,o.jsx)(t.h2,{id:"use-userequest",children:"Use useRequest"}),"\n",(0,o.jsx)(t.p,{children:"For simple parallel requests, you only need to call multiple useRequests at the same time."}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const { data: todoList } = useRequest(todoListGetter);\nconst { data: todoCounter } = useRequest(todoCountGetter);\n"})}),"\n",(0,o.jsx)(t.p,{children:"However, such requests are only applicable to simple parallel requests. If you need to perform some operations after all parallel requests are completed, there are two ways to achieve it:"}),"\n",(0,o.jsx)(t.h3,{id:"method-1",children:"Method 1"}),"\n",(0,o.jsxs)(t.p,{children:["Manually create a promise object and use ",(0,o.jsx)(t.code,{children:"Promise.all"})," to complete the effect."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"const {\n  data: todoList,\n  onSuccess: onListSuccess,\n  onError: onListError\n} = useRequest(todoListGetter);\nconst {\n  data: todoCounter,\n  onSuccess: onCountSuccess,\n  onError: onCountError\n} = useRequest(todoCountGetter);\n\n// Manually create a promise object\nconst listPromise = new Promise((resolve, reject) => {\n  onListSuccess(resolve);\n  onListError(reject);\n});\nconst countPromise = new Promise((resolve, reject) => {\n  onCountSuccess(resolve);\n  onCountError(reject);\n});\nconst [listEvent, countEvent] = await Promise.all([listPromise, countPromise]);\n// Parallel requests completed, continue processing business...\n"})}),"\n",(0,o.jsx)(t.h3,{id:"method-2",children:"Method 2"}),"\n",(0,o.jsxs)(t.p,{children:["Use the ",(0,o.jsx)(t.code,{children:"send"})," function returned by the ",(0,o.jsx)(t.code,{children:"useRequest"})," function. Calling ",(0,o.jsx)(t.code,{children:"send"})," will return a usable promise object."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-javascript",children:"// First, let them not automatically send requests\nconst { send: sendList } = useRequest(todoListGetter, { immediate: false });\nconst { send: sendCount } = useRequest(todoCountGetter, { immediate: false });\n\n// Use the promise object returned by the send function\nconst parallelRequest = async () => {\n  const [listResponse, countResponse] = await Promise.all([sendList(), sendCount()]);\n  // Parallel requests completed, continue processing business...\n};\n"})})]})}function d(e={}){const{wrapper:t}={...(0,n.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},11151:(e,t,s)=>{s.d(t,{Z:()=>a,a:()=>l});var o=s(67294);const n={},r=o.createContext(n);function l(e){const t=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),o.createElement(r.Provider,{value:t},e.children)}}}]);