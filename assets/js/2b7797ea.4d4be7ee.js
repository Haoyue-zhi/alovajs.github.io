"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[2579],{3643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>u,default:()=>j,frontMatter:()=>h,metadata:()=>p,toc:()=>m});var r=n(5893),s=n(1151),a=n(4866),i=n(5162),o=n(939);const d='<template>\n  <select v-model="userId">\n    <option :value="1">User 1</option>\n    <option :value="2">User 2</option>\n    <option :value="3">User 3</option>\n  </select>\n\n  \x3c!-- Render the filtered todo list --\x3e\n  <div v-if="loading">Loading...</div>\n  <ul v-else>\n    <li v-for="todo in data" :key="todo.id">{{ todo.completed ? \'(Completed)\' : \'\' }}{{ todo.title }}</li>\n  </ul>\n</template>\n\n<script setup>\nimport { ref } from \'vue\';\nimport { useWatcher } from \'alova\';\nimport { alovaInstance } from \'./api\';\n\n// Create method instance\nconst filterTodoList = userId => {\n  return alovaInstance.Get(`/users/${userId}/todos`);\n};\nconst userId = ref(1);\nconst {\n  loading,\n  data,\n  error\n} = useWatcher(\n\n  // Must be set to a function that returns a method instance\n  () => filterTodoList(userId.value),\n\n  // The monitored status array, these status changes will trigger a request\n  [userId]\n);\n<\/script>',l='<template>\n  <select v-model="userId">\n    <option :value="1">User 1</option>\n    <option :value="2">User 2</option>\n    <option :value="3">User 3</option>\n  </select>\n\n  \x3c!-- Render the filtered todo list --\x3e\n  <div v-if="todo.loading">Loading...</div>\n  <ul v-else>\n    <li v-for="todoItem in todo.data" :key="todoItem.id">{{ todoItem.completed ? \'(Completed)\' : \'\' }}{{ todoItem.title }}</li>\n  </ul>\n</template>\n\n<script>\nimport { useWatcher } from \'alova\';\nimport { alovaInstance } from \'./api\';\nimport { mapAlovaHook } from \'@alova/vue-options\';\n\n// Create method instance\nconst filterTodoList = userId => {\n  return alovaInstance.Get(`/users/${userId}/todos`);\n};\n\nexport default {\n  mixins: mapAlovaHook(function() {\n    return {\n      todo: useWatcher(\n\n        // Must be set to a function that returns a method instance\n        () => filterTodoList(this.userId),\n      \n        // The monitored status array, these status changes will trigger a request\n        [\'userId\']\n      )\n    };\n  }),\n  data() {\n    return {\n      userId: 1\n    };\n  }\n};\n<\/script>',c="\nimport { useState } from 'react';\nimport { useWatcher } from 'alova';\nimport { alovaInstance } from './api';\n\n//Create method instance\nconst filterTodoList = userId => {\n  return alovaInstance.Get(`/users/${userId}/todos`);\n};\n\nconst App = () => {\n  const [userId, setUserId] = useState(1);\n  const {\n    loading,\n    data = [],\n    error\n  } = useWatcher(\n\n    // Must be set to a function that returns a method instance\n    () => filterTodoList(userId),\n\n    // The monitored status array, these status changes will trigger a request\n    [userId]\n  );\n\n  return (\n    <>\n      <select value={userId} onChange={e => setUserId(e.target.value)}>\n        <option value={1}>User 1</option>\n        <option value={2}>User 2</option>\n        <option value={3}>User 3</option>\n      </select>\n\n      {/* Render the filtered todo list */}\n      {loading ? <div>Loading...</div> : null}\n      {!loading ? <ul>\n        {data.map(todo => (\n          <li>{todo.completed ? '(Completed)' : ''}{todo.title}</li>\n        ))}\n      </ul> : null}\n    </>\n  );\n};\nexport default App;",h={title:"Request when states Changed",sidebar_position:50},u=void 0,p={id:"tutorial/learning/use-watcher",title:"Request when states Changed",description:"In some scenarios that need to be re-requested as the data changes, such as paging, data filtering, and fuzzy search, useWatcher can be used to watch the specified state change and send the request immediately.",source:"@site/docs/tutorial/03-learning/04-use-watcher.md",sourceDirName:"tutorial/03-learning",slug:"/tutorial/learning/use-watcher",permalink:"/tutorial/learning/use-watcher",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/03-learning/04-use-watcher.md",tags:[],version:"current",sidebarPosition:50,frontMatter:{title:"Request when states Changed",sidebar_position:50},sidebar:"tutorialSidebar",previous:{title:"Send request",permalink:"/tutorial/learning/use-request"},next:{title:"Data fetch",permalink:"/tutorial/learning/use-fetcher"}},g={},m=[{value:"Keyword Search",id:"keyword-search",level:2},{value:"pagination",id:"pagination",level:2},{value:"Manually send the request",id:"manually-send-the-request",level:2},{value:"Force send request",id:"force-send-request",level:2},{value:"Set static value",id:"set-static-value",level:3},{value:"Dynamically set the force value",id:"dynamically-set-the-force-value",level:3},{value:"Send function parameter passing rules",id:"send-function-parameter-passing-rules",level:2},{value:"useWatcher callback function",id:"usewatcher-callback-function",level:3},{value:"Received in onSuccess, onError, onComplete callback functions",id:"received-in-onsuccess-onerror-oncomplete-callback-functions",level:3},{value:"Received in the force function",id:"received-in-the-force-function",level:3},{value:"Set initial response data",id:"set-initial-response-data",level:2},{value:"Request debounce",id:"request-debounce",level:2},{value:"Set the debounce time of all watching states",id:"set-the-debounce-time-of-all-watching-states",level:3},{value:"Set the debounce time for a single watching state",id:"set-the-debounce-time-for-a-single-watching-state",level:3},{value:"Manually modify the states value",id:"manually-modify-the-states-value",level:2},{value:"Abort request manually",id:"abort-request-manually",level:2},{value:"Prevent sending request when state changes",id:"prevent-sending-request-when-state-changes",level:2},{value:"Whether to interrupt the last unresponsive request",id:"whether-to-interrupt-the-last-unresponsive-request",level:2},{value:"API",id:"api",level:2},{value:"Hook configuration",id:"hook-configuration",level:3},{value:"Responsive data",id:"responsive-data",level:3},{value:"Action function",id:"action-function",level:3},{value:"Event",id:"event",level:3}];function x(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In some scenarios that need to be re-requested as the data changes, such as paging, data filtering, and fuzzy search, ",(0,r.jsx)(t.code,{children:"useWatcher"})," can be used to watch the specified state change and send the request immediately."]}),"\n",(0,r.jsx)(t.h2,{id:"keyword-search",children:"Keyword Search"}),"\n",(0,r.jsx)(t.p,{children:"Next, let's take searching for todo items as an example."}),"\n",(0,r.jsxs)(a.Z,{groupId:"framework",children:[(0,r.jsx)(i.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(o.Z,{template:"vue",mainFile:d,editorHeight:800})}),(0,r.jsx)(i.Z,{value:"2",label:"react",children:(0,r.jsx)(o.Z,{template:"react",mainFile:c,editorHeight:800})}),(0,r.jsx)(i.Z,{value:"3",label:"svelte",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:'<script>\r\n  import { writable } from \'svelte/store\';\r\n\r\n  //Create method instance\r\n  const filterTodoList = userId => {\r\n    return alovaInstance.Get(`/users/${userId}/todos`);\r\n  };\r\n  const userId = writable(0);\r\n  const { loading, data, error } = useWatcher(\r\n    // Parameters must be set to functions that return method instances\r\n    () => filterTodoList($userId),\r\n\r\n    // The monitored status array, these status changes will trigger a request\r\n    [userId]\r\n  );\r\n<\/script>\r\n<select bind:value="{$userId}">\r\n  <option value="{1}">User 1</option>\r\n  <option value="{2}">User 2</option>\r\n  <option value="{3}">User 3</option>\r\n</select>\r\n\r\n\x3c!-- Render the filtered todo list --\x3e\r\n{#if $loading}\r\n<div>Loading...</div>\r\n{:else}\r\n<ul>\r\n  {#each $data as todo}\r\n  <li class="todo-title">{{ todo.completed ? \'(Completed)\' : \'\' }}{{ todo.title }}</li>\r\n  {/each}\r\n</ul>\r\n{/if}\n'})})}),(0,r.jsx)(i.Z,{value:"4",label:"vue options",children:(0,r.jsx)(o.Z,{template:"vue",deps:"vue-options",mainFile:l,editorHeight:800})})]}),"\n",(0,r.jsx)(t.h2,{id:"pagination",children:"pagination"}),"\n",(0,r.jsx)(t.p,{children:"Using the todo list pagination request as an example, you can do this."}),"\n",(0,r.jsxs)(a.Z,{groupId:"framework",children:[(0,r.jsx)(i.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:"<template>\r\n  \x3c!-- ... --\x3e\r\n</template>\r\n\r\n<script setup>\r\n  // method instance creation function\r\n  const getTodoList = currentPage => {\r\n    return alovaInstance.Get('/todo/list', {\r\n      params: {\r\n        currentPage,\r\n        pageSize: 10\r\n      }\r\n    });\r\n  };\r\n\r\n  const currentPage = ref(1);\r\n  const { loading, data, error } = useWatcher(\r\n    // The first parameter is the function that returns the method instance, not the method instance itself\r\n    () => getTodoList(currentPage.value),\r\n    // array of states being watched, these state changes will trigger a request\r\n    [currentPage],\r\n    {\r\n      // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\r\n      // Manually set immediate to true to initially obtain the first page data\r\n      immediate: true\r\n    }\r\n  );\r\n<\/script>\n"})})}),(0,r.jsx)(i.Z,{value:"2",label:"react",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-jsx",children:"import { useState } from 'react';\r\n\r\n// method instance creation function\r\nconst getTodoList = currentPage => {\r\n  return alovaInstance.Get('/todo/list', {\r\n    params: {\r\n      currentPage,\r\n      pageSize: 10\r\n    }\r\n  });\r\n};\r\n\r\nconst App = () => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const {\r\n    loading,\r\n    data,\r\n    error\r\n\r\n    // The first parameter is the function that returns the method instance, not the method instance itself\r\n  } = useWatcher(\r\n    () => getTodoList(currentPage),\r\n    // array of states being watched, these state changes will trigger a request\r\n    [currentPage],\r\n    {\r\n      // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\r\n      // Manually set immediate to true to initially obtain the first page data\r\n      immediate: true\r\n    }\r\n  );\r\n\r\n  return {\r\n    /* ... */\r\n  };\r\n};\n"})})}),(0,r.jsx)(i.Z,{value:"3",label:"svelte",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:"<script>\r\n  import { writable } from 'svelte/store';\r\n\r\n  // method instance creation function\r\n  const getTodoList = currentPage => {\r\n    return alovaInstance.Get('/todo/list', {\r\n      params: {\r\n        currentPage,\r\n        pageSize: 10\r\n      }\r\n    });\r\n  };\r\n\r\n  const currentPage = writable(1);\r\n  const {\r\n    loading,\r\n    data,\r\n    error\r\n\r\n    // The first parameter is the function that returns the method instance, not the method instance itself\r\n  } = useWatcher(\r\n    () => getTodoList($currentPage),\r\n    // array of states being watched, these state changes will trigger a request\r\n    [currentPage],\r\n    {\r\n      // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\r\n      // Manually set immediate to true to initially obtain the first page data\r\n      immediate: true\r\n    }\r\n  );\r\n<\/script>\r\n\r\n\x3c!-- ... --\x3e\n"})})}),(0,r.jsx)(i.Z,{value:"4",label:"vue options",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:"<template>\r\n  \x3c!-- ... --\x3e\r\n</template>\r\n\r\n<script>\r\n  import { mapAlovaHook } from '@alovajs/vue-options';\r\n\r\n  // method instance creation function\r\n  const getTodoList = currentPage => {\r\n    return alovaInstance.Get('/todo/list', {\r\n      params: {\r\n        currentPage,\r\n        pageSize: 10\r\n      }\r\n    });\r\n  };\r\n\r\n  export default {\r\n    mixins: mapAlovaHook(function () {\r\n      paging: useWatcher(\r\n        () => getTodoList(this.currentPage),\r\n\r\n        // array of states being watched, these state changes will trigger a request\r\n        ['currentPage'],\r\n        {\r\n          // \u26a0\ufe0fCalling useWatcher does not trigger by default, pay attention to the difference with useRequest\r\n          // Manually set immediate to true to initially obtain the first page data\r\n          immediate: true\r\n        }\r\n      );\r\n    }),\r\n    data() {\r\n      return {\r\n        currentPage: 1\r\n      };\r\n    }\r\n  };\r\n<\/script>\n"})})})]}),"\n",(0,r.jsx)(t.h2,{id:"manually-send-the-request",children:"Manually send the request"}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes you want to resend the request when the watching state has not changed (for example, the server data has been updated), you can also manually trigger the request through the ",(0,r.jsx)(t.code,{children:"send"})," function, the usage is the same as ",(0,r.jsx)(t.code,{children:"useRequest"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const {\r\n  //...\r\n  // highlight-start\r\n  send\r\n  // highlight-end\r\n} = useWatcher(\r\n  () => getTodoList($currentPage),\r\n  // array of states being watched, these state changes will trigger a request\r\n  [currentPage],\r\n  {\r\n    immediate: true\r\n  }\r\n);\r\n\r\n// highlight-start\r\nsend();\r\n// highlight-end\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"[2.9.0+]"}),"In react, the send function is wrapped with ",(0,r.jsx)(t.code,{children:"useCallback"}),", and it is not limited by the closure trap. You can use it directly in the event without worrying about performance problems."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"force-send-request",children:"Force send request"}),"\n",(0,r.jsxs)(t.p,{children:["Caching data can improve application fluency and reduce server pressure, but there is also the problem of data expiration. When you want to penetrate the cache to obtain the latest data, you can set the ",(0,r.jsx)(t.code,{children:"force"})," property in the configuration of use hooks. help you."]}),"\n",(0,r.jsx)(t.h3,{id:"set-static-value",children:"Set static value"}),"\n",(0,r.jsx)(t.p,{children:"force is false by default. When set to true, the cache will be penetrated every time and a request will be sent"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useWatcher(\r\n  () => alovaInstance.Get('/todo'),\r\n  [\r\n    /*watchingStates*/\r\n  ],\r\n  {\r\n    force: true\r\n  }\r\n);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"dynamically-set-the-force-value",children:"Dynamically set the force value"}),"\n",(0,r.jsx)(t.p,{children:"In actual situations, we often need to set whether to force the request to be sent according to different situations. At this time, force can be set as a function, which can be passed in through the send function."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { send } = useWatcher(\r\n  alovaInstance.Get('/todo'),\r\n  [\r\n    /*watchingStates*/\r\n  ],\r\n  {\r\n    force: id => {\r\n      return !!id;\r\n    }\r\n  }\r\n);\r\nsend(1);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"send-function-parameter-passing-rules",children:"Send function parameter passing rules"}),"\n",(0,r.jsx)(t.p,{children:"In the above example, the send function is called to manually trigger the request, which can accept any number of parameters, and these parameters will be received by the following four functions:"}),"\n",(0,r.jsx)(t.h3,{id:"usewatcher-callback-function",children:"useWatcher callback function"}),"\n",(0,r.jsx)(t.p,{children:"The callback function of useWatcher can be received, as follows:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { send } = useWatcher(currentPage => getTodoList(currentPage));\r\nsend(1); // currentPage in the above callback function will receive 1\n"})}),"\n",(0,r.jsx)(t.h3,{id:"received-in-onsuccess-onerror-oncomplete-callback-functions",children:"Received in onSuccess, onError, onComplete callback functions"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"event.sendArgs"})," in onSuccess, onError, and onComplete callback functions are received in the form of an array"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { send, onSuccess, onError, onComplete } = useWatcher(currentPage => getTodoList(currentPage));\r\nonSuccess(event => {\r\n  // The value of sendArgs is [1]\r\n  console.log(event.sendArgs);\r\n});\r\nonError(event => {\r\n  // The value of sendArgs is [1]\r\n  console.log(event.sendArgs);\r\n});\r\nonComplete(event => {\r\n  // The value of sendArgs is [1]\r\n  console.log(event.sendArgs);\r\n});\r\nsend(1);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"received-in-the-force-function",children:"Received in the force function"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { send } = useWatcher(\r\n  alovaInstance.Get('/todo'),\r\n  [\r\n    /*watchingStates*/\r\n  ],\r\n  {\r\n    force: id => {\r\n      return !!id;\r\n    }\r\n  }\r\n);\r\nsend(1);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"set-initial-response-data",children:"Set initial response data"}),"\n",(0,r.jsx)(t.p,{children:"Before a page gets the initial data, it inevitably needs to wait for the response from the server. Before the response, it is generally necessary to initialize the state to an empty array or an empty object, so as not to cause an error on the page. We can set the second parameter to set the initial data."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// You can also set the initial value of data in useWatcher\r\nconst {\r\n  // The initial value of data before the response is [], not undefined\r\n  data\r\n} = useWatcher(\r\n  () => getTodoList(/* parameter */),\r\n  [\r\n    /* watch states */\r\n  ],\r\n  {\r\n    initialData: []\r\n  }\r\n);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"request-debounce",children:"Request debounce"}),"\n",(0,r.jsx)(t.p,{children:"Usually we write debounce code at the level of frequently triggered events. This time we implemented the debounce function at the request level, which means that you no longer need to implement debounce yourself in the fuzzy search function, and the usage is very simple."}),"\n",(0,r.jsx)(t.admonition,{title:"Tips: What is function debounce",type:"info",children:(0,r.jsx)(t.p,{children:"Function debounce means that after an event is triggered, the function can only be executed once within n seconds. If an event is triggered again within n seconds after the event is triggered, the delayed execution time of the function will be recalculated (here and the function section To distinguish between streams, function throttling means that the event cannot be triggered again within a period of time after the event is triggered)"})}),"\n",(0,r.jsx)(t.h3,{id:"set-the-debounce-time-of-all-watching-states",children:"Set the debounce time of all watching states"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { loading, data, error } = useWatcher(() => filterTodoList(keyword, date), [keyword, date], {\r\n  // highlight-start\r\n  // When debounce is set to a number, it represents the debounce time of all listening states, in milliseconds\r\n  // As shown here, when one or more changes of states keyword and date, the request will be sent after 500ms\r\n  debounce: 500\r\n  // highlight-end\r\n});\n"})}),"\n",(0,r.jsx)(t.h3,{id:"set-the-debounce-time-for-a-single-watching-state",children:"Set the debounce time for a single watching state"}),"\n",(0,r.jsxs)(t.p,{children:["In many scenarios, we only need to stabilize some frequently changing watching states, such as state changes triggered by ",(0,r.jsx)(t.code,{children:"onInput"})," of a text box, we can do this:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const { loading, data, error } = useWatcher(() => filterTodoList(keyword, date), [keyword, date], {\r\n  // highlight-start\r\n  // Set the debounce time respectively in the array order of the watching state, 0 or no transmission means no debounce\r\n  // The order of the watching states here is [keyword, date], and the debounce array is set to [500, 0], which means that the debounce is only set for the keyword alone\r\n  debounce: [500, 0]\r\n  // You can also set it as follows:\r\n  // debounce: [500],\r\n  // highlight-end\r\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"manually-modify-the-states-value",children:"Manually modify the states value"}),"\n",(0,r.jsxs)(t.p,{children:["In alova, various states such as ",(0,r.jsx)(t.code,{children:"data"}),", ",(0,r.jsx)(t.code,{children:"loading"}),", and ",(0,r.jsx)(t.code,{children:"error"})," returned by ",(0,r.jsx)(t.code,{children:"useWatcher"})," allow custom modification, which will become very convenient in some cases."]}),"\n",(0,r.jsxs)(a.Z,{groupId:"framework",children:[(0,r.jsx)(i.Z,{value:"1",label:"vue composition",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const watchingState = ref('');\r\nconst { data, loading, error } = useWatcher(todoListGetter, [watchingState]);\r\n\r\n//...\r\n// Modify the data value directly\r\ndata.value = {};\n"})})}),(0,r.jsxs)(i.Z,{value:"2",label:"react",children:[(0,r.jsxs)(t.p,{children:["In react, the returned state is data that can be used directly, so it needs to be modified by the ",(0,r.jsx)(t.code,{children:"update"})," function."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const [watchingState, setWatchingState] = useState('');\r\nconst { data, loading, error, update } = useWatcher(todoListGetter, [watchingState]);\r\n\r\n//...\r\n// update the data value through update\r\nupdate({\r\n  data: {}\r\n});\n"})})]}),(0,r.jsxs)(i.Z,{value:"3",label:"svelte",children:[(0,r.jsxs)(t.p,{children:["In svelte, the states returned by ",(0,r.jsx)(t.code,{children:"useWatcher"})," is of type ",(0,r.jsx)(t.code,{children:"writable"}),"."]}),(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const watchingState = writable('');\r\nconst { data, loading, error } = useWatcher(todoListGetter, [watchingState]);\r\n\r\n//...\r\n// update the data value directly\r\n$data = {};\r\n// or data.update(d => ({}));\n"})})]}),(0,r.jsx)(i.Z,{value:"4",label:"vue options",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"export default {\r\n  mixins: mapAlovaHook(function () {\r\n    todo: useWatcher(todoListGetter, ['watchingState']);\r\n  }),\r\n  methods: {\r\n    handleModifyTodo() {\r\n      // updat the data value directly\r\n      this.todo.data = {};\r\n\r\n      // or use update function\r\n      this.todo.update({\r\n        data: {}\r\n      });\r\n    }\r\n  }\r\n};\n"})})})]}),"\n",(0,r.jsx)(t.admonition,{title:"Notes",type:"warning",children:(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["The custom modified value will be overwritten by the internal state management mechanism of ",(0,r.jsx)(t.code,{children:"useWatcher"}),". For example, when you modify the value of ",(0,r.jsx)(t.code,{children:"data"}),", the value of ",(0,r.jsx)(t.code,{children:"data"})," will be assigned the latest response data after requesting again;"]}),"\n",(0,r.jsxs)(t.li,{children:["The state value modified directly will not modify the cached data synchronously. If you need to modify the cached data synchronously, it is recommended to use ",(0,r.jsx)(t.a,{href:"/tutorial/learning/update-response-data-across-modules",children:"updateState"})]}),"\n"]})}),"\n",(0,r.jsx)(t.h2,{id:"abort-request-manually",children:"Abort request manually"}),"\n",(0,r.jsxs)(t.p,{children:["When the ",(0,r.jsx)(t.code,{children:"timeout"})," parameter is not set, the request will never time out. If you need to manually interrupt the request, you can receive the ",(0,r.jsx)(t.code,{children:"abort"})," method when the ",(0,r.jsx)(t.code,{children:"useWatcher"})," function is called."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const {\r\n  //...\r\n  // highlight-start\r\n  // abort function is used to interrupt request\r\n  abort\r\n  // highlight-end\r\n} = useWatcher(() => filterTodoList(keyword), [keyword]);\r\n\r\n// highlight-start\r\n// Call abort to interrupt the request\r\nconst handleCancel = () => {\r\n  abort();\r\n};\r\n// highlight-end\n"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"[2.9.0+]"}),"In react, the abort function is wrapped with ",(0,r.jsx)(t.code,{children:"useCallback"}),", and it is not limited by the closure trap. You can use it directly in the event without worrying about performance problems."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"[2.6.2+]"}),"In addition, this ",(0,r.jsx)(t.code,{children:"abort"})," function will also be bound to the current method instance, so you can also call ",(0,r.jsx)(t.code,{children:"abort"})," in ",(0,r.jsx)(t.code,{children:"beforeRequest"})," to abort the request."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const alovaInst = createAlova({\r\n  //...\r\n  beforeRequest(method) {\r\n    if (someCondition) {\r\n      method.abort();\r\n    }\r\n  }\r\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"prevent-sending-request-when-state-changes",children:"Prevent sending request when state changes"}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes you want not to send a request when the watched state changes. You can control whether to send a request when the watched state changes through the sendable attribute in the Hook configuration. The sendable attribute is a function whose parameter is the ",(0,r.jsx)(t.code,{children:"AlovaEvent"})," event object. Contains the array ",(0,r.jsx)(t.code,{children:"sendArgs"})," composed of the parameters passed in by the ",(0,r.jsx)(t.code,{children:"send"})," function, and the ",(0,r.jsx)(t.code,{children:"method"})," instance of the current request, and the function returns a ",(0,r.jsx)(t.code,{children:"truthy/falsy"})," value to determine whether the request needs to be triggered when the states changes (default is ",(0,r.jsx)(t.code,{children:"true"}),"), ",(0,r.jsx)(t.strong,{children:"throwing an error also means not triggering the request"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useWatcher(\r\n  () => getTodoList($currentPage),\r\n  // An array of watched states, these state changes will trigger a request\r\n  [state],\r\n  {\r\n    // highlight-start\r\n    sendable: methodInstance => {\r\n      // do something\r\n      // Send request only when state is 1\r\n      return state === 1;\r\n    }\r\n    // highlight-end\r\n  }\r\n);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"whether-to-interrupt-the-last-unresponsive-request",children:"Whether to interrupt the last unresponsive request"}),"\n",(0,r.jsxs)(t.p,{children:["Sometimes when the states watched by ",(0,r.jsx)(t.code,{children:"useWatcher"})," changes continuously and leads to the initiation of continuous requests, the latter request gets a response before the previous request, but when the previous request gets a response, it will overwrite the response of the latter request. Causes to get a response that does not match the state; for example, a request ",(0,r.jsx)(t.code,{children:"1"})," is sent after a state ",(0,r.jsx)(t.code,{children:"state"})," changes, and then the value of ",(0,r.jsx)(t.code,{children:"state"})," is changed before the request ",(0,r.jsx)(t.code,{children:"1"})," is responded to, and a request is sent",(0,r.jsx)(t.code,{children:" 2"}),", if request ",(0,r.jsx)(t.code,{children:"1"})," returns after request ",(0,r.jsx)(t.code,{children:"2"}),", the final response data will remain at request ",(0,r.jsx)(t.code,{children:"1"}),".\r\nSo we designed the ",(0,r.jsx)(t.code,{children:"abortLast"})," parameter, which is used to mark whether to interrupt the last unresponsive request when the next request is sent. The default is ",(0,r.jsx)(t.code,{children:"true"}),", so that only the last request issued by ",(0,r.jsx)(t.code,{children:"useWatcher"})," is valid."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"useWatcher(\r\n  () => getTodoList($currentPage),\r\n  // An array of watched states, these state changes will trigger a request\r\n  [state],\r\n  {\r\n    // highlight-start\r\n    abortLast: true // Whether to interrupt the last unresponsive request, the default is true\r\n    // highlight-end\r\n  }\r\n);\n"})}),"\n",(0,r.jsx)(t.admonition,{title:"Precautions",type:"warning",children:(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"abortLast"})," defaults to ",(0,r.jsx)(t.code,{children:"true"}),", if it is changed to ",(0,r.jsx)(t.code,{children:"false"}),", it may cause a problem that the state does not match the response."]})}),"\n",(0,r.jsx)(t.h2,{id:"api",children:"API"}),"\n",(0,r.jsx)(t.h3,{id:"hook-configuration",children:"Hook configuration"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Default"}),(0,r.jsx)(t.th,{children:"Version"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"immediate"}),(0,r.jsx)(t.td,{children:"Whether to initiate the request immediately"}),(0,r.jsx)(t.td,{children:"boolean"}),(0,r.jsx)(t.td,{children:"true"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"initialData"}),(0,r.jsxs)(t.td,{children:["The initial data value, the data value is the initial value before the first response, ",(0,r.jsx)(t.code,{children:"undefined"})," if not set"]}),(0,r.jsx)(t.td,{children:"any"}),(0,r.jsx)(t.td,{children:"-"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"force"}),(0,r.jsx)(t.td,{children:"Whether to force the request, it can be set as a function to dynamically return a boolean value"}),(0,r.jsx)(t.td,{children:"boolean"}),(0,r.jsx)(t.td,{children:"(...args: any[]) => boolean | false"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"managedStates"}),(0,r.jsx)(t.td,{children:"Additional managed states, can be updated via updateState"}),(0,r.jsx)(t.td,{children:"Record<string"}),(0,r.jsx)(t.td,{children:"Record<string | number | symbol, any>"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"debounce"}),(0,r.jsx)(t.td,{children:"Request debounce time (milliseconds), when passing in the array, you can set the debounce time separately according to the order of watchingStates"}),(0,r.jsx)(t.td,{children:"number"}),(0,r.jsx)(t.td,{children:"number | number[]"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"middleware"}),(0,r.jsxs)(t.td,{children:["Middleware function, ",(0,r.jsx)(t.a,{href:"/tutorial/advanced/middleware",children:"Learn about alova middleware"})]}),(0,r.jsxs)(t.td,{children:["(context: ",(0,r.jsx)(t.a,{href:"/tutorial/learning/use-request/#alovafrontmiddlewarecontext",children:"AlovaFrontMiddlewareContext"}),", next: ",(0,r.jsx)(t.a,{href:"/tutorial/learning/use-request/#alovaguardnext",children:"AlovaGuardNext"}),") => Promise<any>"]}),(0,r.jsx)(t.td,{children:"-"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"sendable"}),(0,r.jsx)(t.td,{children:"Whether to send a request when the watched state changes"}),(0,r.jsx)(t.td,{children:"(methodInstance: AlovaEvent) => boolean"}),(0,r.jsx)(t.td,{children:"() => true"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"abortLast"}),(0,r.jsx)(t.td,{children:"Whether to interrupt the last unresponsive request"}),(0,r.jsx)(t.td,{children:"boolean"}),(0,r.jsx)(t.td,{children:"true"}),(0,r.jsx)(t.td,{children:"-"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"responsive-data",children:"Responsive data"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Type"}),(0,r.jsx)(t.th,{children:"Version"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"loading"}),(0,r.jsx)(t.td,{children:"request loading states"}),(0,r.jsx)(t.td,{children:"boolean"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"data"}),(0,r.jsx)(t.td,{children:"response data"}),(0,r.jsx)(t.td,{children:"any"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"error"}),(0,r.jsx)(t.td,{children:"request error message"}),(0,r.jsx)(t.td,{children:"Error | undefined"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"downloading"}),(0,r.jsx)(t.td,{children:"download progress information"}),(0,r.jsx)(t.td,{children:"Object"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"uploading"}),(0,r.jsx)(t.td,{children:"upload progress information"}),(0,r.jsx)(t.td,{children:"Object"}),(0,r.jsx)(t.td,{children:"-"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"action-function",children:"Action function"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"name"}),(0,r.jsx)(t.th,{children:"description"}),(0,r.jsx)(t.th,{children:"function parameters"}),(0,r.jsx)(t.th,{children:"return value"}),(0,r.jsx)(t.th,{children:"version"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"send"}),(0,r.jsx)(t.td,{children:"send request function"}),(0,r.jsx)(t.td,{children:"...args: any[]"}),(0,r.jsx)(t.td,{children:"Promise"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"abort"}),(0,r.jsx)(t.td,{children:"interrupt function"}),(0,r.jsx)(t.td,{children:"-"}),(0,r.jsx)(t.td,{children:"-"}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"update"}),(0,r.jsx)(t.td,{children:"A function to update the front-end state of the current use hook, more useful in react"}),(0,r.jsxs)(t.td,{children:["newFrontStates: ",(0,r.jsx)(t.a,{href:"/tutorial/learning/use-request/#frontrequeststate",children:"FrontRequestState"})]}),(0,r.jsx)(t.td,{children:"-"}),(0,r.jsx)(t.td,{})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"event",children:"Event"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Name"}),(0,r.jsx)(t.th,{children:"Description"}),(0,r.jsx)(t.th,{children:"Callback Parameters"}),(0,r.jsx)(t.th,{children:"Version"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"onSuccess"}),(0,r.jsx)(t.td,{children:"request success event binding"}),(0,r.jsxs)(t.td,{children:["event: ",(0,r.jsx)(t.a,{href:"/tutorial/learning/use-request/#alovasuccessevent",children:"AlovaSuccessEvent"})]}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"onError"}),(0,r.jsx)(t.td,{children:"request error event binding"}),(0,r.jsxs)(t.td,{children:["event: ",(0,r.jsx)(t.a,{href:"/tutorial/learning/use-request/#alovaerrorevent",children:"AlovaErrorEvent"})]}),(0,r.jsx)(t.td,{children:"-"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"onComplete"}),(0,r.jsx)(t.td,{children:"request complete event binding"}),(0,r.jsxs)(t.td,{children:["event: ",(0,r.jsx)(t.a,{href:"/tutorial/learning/use-request/#alovacompleteevent",children:"AlovaCompleteEvent"})]}),(0,r.jsx)(t.td,{children:"-"})]})]})]})]})}function j(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(x,{...e})}):x(e)}},939:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(9020),s=n(3808),a=n(2949),i=n(5893);const o={vue:{root:"/src/App.vue",api:e=>({"/src/api.js":`\nimport { createAlova } from 'alova';\nimport GlobalFetch from 'alova/GlobalFetch';\n${"vue-options"===e?"import { VueOptionsHook } from '@alova/vue-options';":"import VueHook from 'alova/vue';"}\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: ${"vue-options"===e?"VueOptionsHook":"VueHook"},\n  requestAdapter: GlobalFetch(),\n  responded: response => response.json()\n});`})},react:{root:"/App.js",api:()=>({"/api.js":"import { createAlova } from 'alova';\nimport GlobalFetch from 'alova/GlobalFetch';\nimport ReactHook from 'alova/react';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: ReactHook,\n  requestAdapter: GlobalFetch(),\n  responded: response => response.json()\n});"})},svelte:{root:"/App.svelte",api:()=>({"/api.js":"import { createAlova } from 'alova';\nimport GlobalFetch from 'alova/GlobalFetch';\nimport SvelteHook from 'alova/svelte';\nexport const alovaInstance = createAlova({\n  baseURL: 'https://jsonplaceholder.typicode.com',\n  statesHook: SvelteHook,\n  requestAdapter: GlobalFetch(),\n  responded: response => response.json()\n});"})},static:{root:"/index.html"}},d={"vue-options":{"@alova/vue-options":"latest"}},l=e=>{let{template:t,mainFile:n,externalFiles:l={},defaultAlova:c=!0,editorHeight:h,deps:u}=e;const p={light:s.A1,dark:s.cL},g=o[t],m={[g.root]:n,...c&&"function"==typeof g.api?g.api(u):{},...l},x={alova:"latest",...u&&d[u]?d[u]:{}},{colorMode:j}=(0,a.I)();return(0,i.jsx)(r.xR,{theme:p[j],template:t,customSetup:{dependencies:x},options:{editorWidthPercentage:70,editorHeight:h},files:m})}}}]);