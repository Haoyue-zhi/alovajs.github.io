"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[4180],{6090:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(5893),r=t(1151);const o={title:"Request manually",sidebar_position:90},i=void 0,a={id:"tutorial/getting-started/request-manually",title:"Request manually",description:"Close request immediately",source:"@site/docs/tutorial/02-getting-started/09-request-manually.md",sourceDirName:"tutorial/02-getting-started",slug:"/tutorial/getting-started/request-manually",permalink:"/tutorial/getting-started/request-manually",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/02-getting-started/09-request-manually.md",tags:[],version:"current",sidebarPosition:90,frontMatter:{title:"Request manually",sidebar_position:90},sidebar:"tutorialSidebar",previous:{title:"response processing",permalink:"/tutorial/getting-started/response"},next:{title:"states change request",permalink:"/tutorial/getting-started/states-change-request"}},c={},l=[{value:"Close request immediately",id:"close-request-immediately",level:2},{value:"send function parameter passing rules",id:"send-function-parameter-passing-rules",level:2},{value:"Received in useRequest callback function",id:"received-in-userequest-callback-function",level:3},{value:"Received in onSuccess, onError, onComplete callback functions",id:"received-in-onsuccess-onerror-oncomplete-callback-functions",level:3},{value:"Received in force function",id:"received-in-force-function",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"close-request-immediately",children:"Close request immediately"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"useRequest"})," will send the request immediately when called by default, butWhen you need to use ",(0,s.jsx)(n.code,{children:"useRequest"})," to submit data, such as creating a new todo item, you can first turn off the default sending request, switch to manually triggering the request, and receive the ",(0,s.jsx)(n.code,{children:"send"})," function in useRequest to manually send the request. The ",(0,s.jsx)(n.code,{children:"send"})," function A Promise instance with response data will be returned, which will change to the resolve state after requesting a response."]}),"\n",(0,s.jsxs)(n.p,{children:["At this time, in order to receive the parameters passed by the ",(0,s.jsx)(n.code,{children:"send"})," function, you can set the first parameter of ",(0,s.jsx)(n.code,{children:"useRequest"})," to a function."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const {\r\n  // ...\r\n  // Manual sender request function, send the request after calling\r\n  send: addTodo\r\n\r\n  //The parameters of the send function will be received here\r\n} = useRequest(newTodo => alovaInstance.Post('/todo', newTodo), {\r\n  // When immediate is false, it will not be emitted by default.\r\n  immediate: false\r\n});\r\n\r\n// Manually send request\r\nconst handleAddTodo = () => {\r\n  const newTodo = {\r\n    title: 'New todo item',\r\n    time: new Date().toLocaleString()\r\n  };\r\n  // The send function returns a Promise object that can receive response data\r\n  addTodo(newTodo)\r\n    .then(result => {\r\n      console.log('The new todo item was added successfully, the response data is:', result);\r\n    })\r\n    .catch(error => {\r\n      console.log('Failed to add todo item, error message is:', error);\r\n    });\r\n};\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"send"})," function let you freely repeat the request."]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"[2.9.0+]"})," In react, the send function is wrapped with ",(0,s.jsx)(n.code,{children:"useCallback"}),", and it is not restricted by closure traps. You can use it directly in events without worrying about causing performance problems."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"send-function-parameter-passing-rules",children:"send function parameter passing rules"}),"\n",(0,s.jsx)(n.p,{children:"In the above example, when the send function triggers a request, any number of parameters can be passed in. These parameters can actually be received by the following five functions:"}),"\n",(0,s.jsx)(n.h3,{id:"received-in-userequest-callback-function",children:"Received in useRequest callback function"}),"\n",(0,s.jsx)(n.p,{children:"Can be received when the first parameter of useRequest is set to a callback function, which is often useful when deleting list items, as follows:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const { send } = useRequest(id => removeTodoPoster(id));\r\nsend(1); // The id in the above callback function will receive 1\n"})}),"\n",(0,s.jsx)(n.h3,{id:"received-in-onsuccess-onerror-oncomplete-callback-functions",children:"Received in onSuccess, onError, onComplete callback functions"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"event.sendArgs"})," in onSuccess, onError and onComplete callback functions are received in the form of arrays"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const { send, onSuccess, onError, onComplete } = useRequest(newTodo => alovaInstance.Post('/todo', newTodo));\r\nonSuccess(event => {\r\n  //The value of sendArgs is [1]\r\n  console.log(event.sendArgs);\r\n});\r\nonError(event => {\r\n  //The value of sendArgs is [1]\r\n  console.log(event.sendArgs);\r\n});\r\nonComplete(event => {\r\n  //The value of sendArgs is [1]\r\n  console.log(event.sendArgs);\r\n});\r\n\r\n// send request\r\nsend(1);\n"})}),"\n",(0,s.jsx)(n.h3,{id:"received-in-force-function",children:"Received in force function"}),"\n",(0,s.jsxs)(n.p,{children:["force is used to specify whether it is necessary to penetrate the response cache. The content of the response cache will be explained in the ",(0,s.jsx)(n.a,{href:"/tutorial/cache/force-request",children:"Cache-force request"})," later."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const { send } = useRequest(alovaInstance.Get('/todo'), {\r\n  force: id => {\r\n    return !!id;\r\n  }\r\n});\r\nsend(1);\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>i});var s=t(7294);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);