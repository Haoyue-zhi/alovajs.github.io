"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[2542],{37929:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var t=a(85893),o=a(11151);const i={title:"Migrate from axios"},s=void 0,r={id:"tutorial/project/migration/from-axios",title:"Migrate from axios",description:"Benefits of this migration guide:",source:"@site/docs/tutorial/07-project/02-migration/02-from-axios.md",sourceDirName:"tutorial/07-project/02-migration",slug:"/tutorial/project/migration/from-axios",permalink:"/tutorial/project/migration/from-axios",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/07-project/02-migration/02-from-axios.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Migrate from axios"},sidebar:"tutorial",previous:{title:"v3 upgrade guidelines",permalink:"/tutorial/project/migration/v2-to-v3"}},l={},c=[{value:"Migration steps",id:"migration-steps",level:2},{value:"1. Install the package",id:"1-install-the-package",level:3},{value:"2. Create an alova instance",id:"2-create-an-alova-instance",level:3},{value:"3. Keep the existing code unchanged",id:"3-keep-the-existing-code-unchanged",level:3},{value:"4. Gradually migrate requests",id:"4-gradually-migrate-requests",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Benefits of this migration guide:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Minimal changes: You only need to create an Alova instance, and other code can be changed slowly."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Gradual migration: You can migrate one interface at a time without having to rewrite all the code at once."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Maintain consistency: Use the existing axios instance, and the original configuration and interceptor are still valid."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Coexistence of the old and the new: During the migration process, axios and Alova can be used at the same time without affecting each other."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"migration-steps",children:"Migration steps"}),"\n",(0,t.jsx)(n.h3,{id:"1-install-the-package",children:"1. Install the package"}),"\n",(0,t.jsx)(n.p,{children:"First, install alova and its axios adapter:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# npm\nnpm install alova @alova/adapter-axios\n\n# yarn\nyarn add alova @alova/adapter-axios\n\n# pnpm\npnpm install alova @alova/adapter-axios\n\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-create-an-alova-instance",children:"2. Create an alova instance"}),"\n",(0,t.jsx)(n.p,{children:"Use your existing axios instance to create an alova instance:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"import { createAlova } from 'alova';\nimport { axiosRequestAdapter } from '@alova/adapter-axios';\nimport axiosInstance from './your-axios-instance'; // your existing axios instance\n\nconst alovaInst = createAlova({\n  statesHook, // VueHook / ReactHook / SvelteHook\n  requestAdapter: axiosRequestAdapter({\n    axios: axiosInstance\n  })\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-keep-the-existing-code-unchanged",children:"3. Keep the existing code unchanged"}),"\n",(0,t.jsx)(n.p,{children:"For the parts that you don't want to change for the time being, continue to use the original axios method without any changes."}),"\n",(0,t.jsx)(n.p,{children:"Now, you can use the method instance of alova."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const getUser = id => alovaInst.Get(`/user/${id}`);\n\n// Use in components\nconst { loading, data, error } = useRequest(getUser(userId));\n"})}),"\n",(0,t.jsx)(n.h3,{id:"4-gradually-migrate-requests",children:"4. Gradually migrate requests"}),"\n",(0,t.jsxs)(n.p,{children:["If you pursue a unified user experience, you can also gradually rewrite axios requests to alova requests. Just replace methods such as ",(0,t.jsx)(n.code,{children:"axios.get"})," and ",(0,t.jsx)(n.code,{children:"axios.post"})," with ",(0,t.jsx)(n.code,{children:"alovaInst.Get"})," and ",(0,t.jsx)(n.code,{children:"alovaInst.Post"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"// Original get request\nconst todoList = id => axios.get('/todo');\n// After change\nconst todoList = id => alovaInst.Get('/todo');\n\n// Original post request\nconst todoList = data =>\n  axios.post('/todo', data, {\n    responseType: 'json',\n    responseEncoding: 'utf8'\n  });\n// After change\nconst todoList = data =>\n  alovaInst.Post('/todo', data, {\n    responseType: 'json',\n    responseEncoding: 'utf8'\n  });\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>r,a:()=>s});var t=a(67294);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);