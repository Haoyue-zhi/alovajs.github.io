"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[5089],{72931:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var r=n(85893),o=n(11151);n(74866),n(85162);const s={title:"Global Interceptor"},a=void 0,i={id:"tutorial/getting-started/global-interceptor",title:"Global Interceptor",description:"Global request interceptor",source:"@site/versioned_docs/version-2.x/tutorial/02-getting-started/05-global-interceptor.md",sourceDirName:"tutorial/02-getting-started",slug:"/tutorial/getting-started/global-interceptor",permalink:"/tutorial/getting-started/global-interceptor",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/versioned_docs/version-2.x/tutorial/02-getting-started/05-global-interceptor.md",tags:[],version:"2.x",sidebarPosition:5,frontMatter:{title:"Global Interceptor"},sidebar:"tutorial",previous:{title:"Alova Instance",permalink:"/tutorial/getting-started/alova"},next:{title:"Method Metadata",permalink:"/tutorial/getting-started/method-metadata"}},l={},c=[{value:"Global request interceptor",id:"global-request-interceptor",level:2},{value:"Global response interceptor",id:"global-response-interceptor",level:2}];function u(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h2,{id:"global-request-interceptor",children:"Global request interceptor"}),"\n",(0,r.jsx)(t.p,{children:"Usually, we need to use the same configuration for all requests, such as adding token and timestamp to the request header. At this time, we can set a global request interceptor, which will be triggered before all requests. We can set this interceptor Set request parameters uniformly."}),"\n",(0,r.jsx)(t.mermaid,{value:"flowchart LR\n   R1[Request 1] --\x3e beforeRequest\n   R2[Request 2] --\x3e beforeRequest\n   R3[Request 3] --\x3e beforeRequest\n   RN[Request N] --\x3e beforeRequest\n   beforeRequest --\x3e S1[Send request]"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const alovaInstance = createAlova({\n  // ...\n  //The function parameter is a method instance, including request data such as url, params, data, headers, etc.\n  // You can modify these data freely\n  // highlight-start\n  beforeRequest(method) {\n    // Suppose we need to add token to the request header\n    method.config.headers.token = 'token';\n  }\n  // highlight-end\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"You can also set beforeRequest as an asynchronous function."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  async beforeRequest(method) {\n    //Perform some asynchronous tasks\n    // ...\n  }\n  // highlight-end\n});\n"})}),"\n",(0,r.jsx)(t.h2,{id:"global-response-interceptor",children:"Global response interceptor"}),"\n",(0,r.jsx)(t.p,{children:"When we want to uniformly parse response data, uniformly handle errors, and uniformly handle request completion, we can specify a global response interceptor when creating an alova instance. The response interceptor includes an interceptor for successful requests and an interceptor for failed requests. and request completion interceptors."}),"\n",(0,r.jsx)(t.mermaid,{value:"flowchart LR\n   classDef error fill:#f96,stroke:#f00,stroke-width:2px;\n\n   R1[Request 1 successful] --\x3e responded.onSuccess\n   R2[Request 2 successful] --\x3e responded.onSuccess\n   RN[Request N successful] --\x3e responded.onSuccess\n   R4[Request 4 failed]:::error --\x3e responded.onError:::error\n   R5[Request M failed]:::error --\x3e responded.onError:::error\n   responded.onSuccess --\x3e responded.onComplete\n   responded.onError --\x3e responded.onComplete"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const alovaInstance = createAlova({\n  // ...\n  //Use two items of the array to specify the interceptor for successful request and the interceptor for failed request respectively.\n  responded: {\n    // highlight-start\n    // Interceptor for successful request\n    // When using the GlobalFetch request adapter, the first parameter receives the Response object\n    // The second parameter is the method instance of the current request. You can use it to synchronize the configuration information before and after the request.\n    onSuccess: async (response, method) => {\n      if (response.status >= 400) {\n        throw new Error(response.statusText);\n      }\n      const json = await response.json();\n      if (json.code !== 200) {\n        // This request will throw an error when an error is thrown or a Promise instance with reject status is returned.\n        throw new Error(json.message);\n      }\n\n      //The parsed response data will be passed to the transformData hook function of the method instance. These functions will be explained later.\n      return json.data;\n    },\n    // highlight-end\n\n    // highlight-start\n    // Interceptor for request failure\n    // This interceptor will be entered when a request error occurs.\n    // The second parameter is the method instance of the current request. You can use it to synchronize the configuration information before and after the request.\n    onError: (err, method) => {\n      alert(error.message);\n    },\n    // highlight-end\n\n    // highlight-start\n    //Interceptor for request completion\n    // When you need to execute logic whether the request succeeds, fails, or hits the cache, you can specify a global `onComplete` interceptor when creating an alova instance, such as turning off the request loading state.\n    // Receive the method instance of the current request\n    onComplete: async method => {\n      // Process request completion logic\n    }\n    // highlight-end\n  }\n});\n"})}),"\n",(0,r.jsx)(t.p,{children:"If you do not need to set an interceptor for request failure or completion, you can directly pass in the interceptor function for successful request, instead of setting a callback through an object."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"const alovaInstance = createAlova({\n  // ...\n  // highlight-start\n  async responded(response, method) {\n    // Interceptor for successful request\n  }\n  // highlight-end\n});\n"})}),"\n",(0,r.jsx)(t.admonition,{title:"Interceptor triggering instructions",type:"info",children:(0,r.jsxs)(t.p,{children:["When you use ",(0,r.jsx)(t.code,{children:"GlobalFetch"})," to request the adapter, due to the characteristics of ",(0,r.jsx)(t.code,{children:"window.fetch"}),", the ",(0,r.jsx)(t.code,{children:"onError"})," interceptor will only be triggered when the connection times out or the connection is aborted. In other cases, the ",(0,r.jsx)(t.code,{children:"onSuccess"})," interceptor will be triggered. ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/docs/Web/API/fetch",children:"For details, please Check here"})]})}),"\n",(0,r.jsx)(t.admonition,{title:"Special attention",type:"warning",children:(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"onSuccess"}),", ",(0,r.jsx)(t.code,{children:"onError"})," and ",(0,r.jsx)(t.code,{children:"onComplete"})," can be set as synchronous functions and asynchronous functions."]}),"\n",(0,r.jsxs)(t.li,{children:["The ",(0,r.jsx)(t.code,{children:"onError"})," callback is a capture function for request errors. An error thrown in ",(0,r.jsx)(t.code,{children:"onSuccess"})," will not trigger ",(0,r.jsx)(t.code,{children:"onError"}),". When an error is caught but no error is thrown or a Promise instance that returns reject status is used, the request will be considered successful and no response data will be obtained."]}),"\n",(0,r.jsxs)(t.li,{children:["In 2.0.x and previous versions, ",(0,r.jsx)(t.code,{children:"responded"})," was incorrectly spelled as ",(0,r.jsx)(t.code,{children:"responsed"}),". In 2.1.0, the two have been made compatible. It is recommended to use ",(0,r.jsx)(t.code,{children:"responded"})," instead of ",(0,r.jsx)(t.code,{children:"responsed"})," in subsequent versions. ."]}),"\n"]})})]})}function d(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},85162:(e,t,n)=>{n.d(t,{Z:()=>a});n(67294);var r=n(90512);const o={tabItem:"tabItem_Ymn6"};var s=n(85893);function a(e){let{children:t,hidden:n,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,a),hidden:n,children:t})}},74866:(e,t,n)=>{n.d(t,{Z:()=>w});var r=n(67294),o=n(90512),s=n(12466),a=n(16550),i=n(20469),l=n(91980),c=n(67392),u=n(20812);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:o}}=e;return{value:t,label:n,attributes:r,default:o}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const o=(0,a.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(o.location.search);t.set(s,e),o.replace({...o.location,search:t.toString()})}),[s,o])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,s=h(e),[a,l]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:s}))),[c,d]=f({queryString:n,groupId:o}),[m,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,s]=(0,u.Nk)(n);return[o,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:o}),b=(()=>{const e=c??m;return p({value:e,tabValues:s})?e:null})();(0,i.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),g(e)}),[d,g,s]),tabValues:s}}var g=n(72389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(85893);function x(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),u=e=>{const t=e.currentTarget,n=l.indexOf(t),o=i[n].value;o!==r&&(c(t),a(o))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:s}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>l.push(e),onKeyDown:d,onClick:u,...s,className:(0,o.Z)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function q(e){let{lazy:t,children:n,selectedValue:o}=e;const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=s.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==o})))})}function j(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,o.Z)("tabs-container",b.tabList),children:[(0,v.jsx)(x,{...t,...e}),(0,v.jsx)(q,{...t,...e})]})}function w(e){const t=(0,g.Z)();return(0,v.jsx)(j,{...e,children:d(e.children)},String(t))}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>a});var r=n(67294);const o={},s=r.createContext(o);function a(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);