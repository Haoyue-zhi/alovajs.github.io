"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[5609],{63176:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(85893),r=n(11151),o=n(74866),s=n(85162);const i={title:"Typescript"},l=void 0,c={id:"tutorial/combine-framework/typescript",title:"Typescript",description:"In terms of Typescript, we have indeed spent a lot of effort on optimization in order to provide a better user experience. We try our best to use automatic type inference to reduce the trouble of defining types for you.",source:"@site/versioned_docs/version-2.x/tutorial/03-combine-framework/10-typescript.md",sourceDirName:"tutorial/03-combine-framework",slug:"/tutorial/combine-framework/typescript",permalink:"/tutorial/combine-framework/typescript",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/versioned_docs/version-2.x/tutorial/03-combine-framework/10-typescript.md",tags:[],version:"2.x",sidebarPosition:10,frontMatter:{title:"Typescript"},sidebar:"tutorial",previous:{title:"Receive Params",permalink:"/tutorial/combine-framework/receive-params"},next:{title:"Response Cache",permalink:"/tutorial/cache/"}},d={},u=[{value:"Automatically infer alova useHooks states type",id:"automatically-infer-alova-usehooks-states-type",level:2},{value:"Type of response data",id:"type-of-response-data",level:2},{value:"Case 1",id:"case-1",level:3},{value:"Case 2",id:"case-2",level:3},{value:"Type inferred from request adapter",id:"type-inferred-from-request-adapter",level:2},{value:"Method configuration type of instance",id:"method-configuration-type-of-instance",level:3},{value:"Global response interceptor parameter type",id:"global-response-interceptor-parameter-type",level:3}];function p(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.p,{children:"In terms of Typescript, we have indeed spent a lot of effort on optimization in order to provide a better user experience. We try our best to use automatic type inference to reduce the trouble of defining types for you."}),"\n",(0,a.jsx)(t.h2,{id:"automatically-infer-alova-usehooks-states-type",children:"Automatically infer alova useHooks states type"}),"\n",(0,a.jsxs)(t.p,{children:["When createAlova creates an alova instance, the state types created by ",(0,a.jsx)(t.code,{children:"useRequest"}),", ",(0,a.jsx)(t.code,{children:"useWatcher"}),", and ",(0,a.jsx)(t.code,{children:"useFetcher"})," will be automatically inferred based on the passed ",(0,a.jsx)(t.code,{children:"statesHook"}),". Currently only Vue, React, and Svelte are supported."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"useFetcher"})," is a useHook used for data fetching. For details, please read ",(0,a.jsx)(t.a,{href:"/tutorial/advanced/use-fetcher",children:"Advanced-Data fetching chapter"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"The following are the status types returned by useHooks by default."}),"\n",(0,a.jsxs)(o.Z,{groupId:"framework",children:[(0,a.jsx)(s.Z,{value:"1",label:"VueHook",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const vueAlova = createAlova({\n  statesHook: VueHook\n  // ...\n});\nconst {\n  loading, // Ref<boolean>\n  data, // Ref<{ data: any }>\n  error // Ref<Error>\n} = useRequest(vueAlova.Get<{ data: any }>('/todo/list'));\n"})})}),(0,a.jsx)(s.Z,{value:"2",label:"ReactHook",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const reactAlova = createAlova({\n  statesHook: ReactHook\n  // ...\n});\nconst {\n  loading, // boolean\n  data, // { data: any }\n  error // Error\n} = useRequest(reactAlova.Get<{ data: any }>('/todo/list'));\n"})})}),(0,a.jsx)(s.Z,{value:"3",label:"SvelteHook",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const svelteAlova = createAlova({\n  statesHook: SvelteHook\n  // ...\n});\nconst {\n  loading, // Writable<boolean>\n  data, // Writable<{ data: any }>\n  error // Writable<Error>\n} = useRequest(svelteAlova.Get<{ data: any }>('/todo/list'));\n"})})})]}),"\n",(0,a.jsx)(t.p,{children:"The type of data will be different depending on the response data type specified in different Method instances, let's continue to look below."}),"\n",(0,a.jsx)(t.h2,{id:"type-of-response-data",children:"Type of response data"}),"\n",(0,a.jsx)(t.p,{children:"When you specify a type for a data interface, you need to divide it into two situations."}),"\n",(0,a.jsx)(t.h3,{id:"case-1",children:"Case 1"}),"\n",(0,a.jsxs)(t.p,{children:["When the response data does not need to be converted by calling ",(0,a.jsx)(t.code,{children:"transformData"}),", the type can be specified directly through generics."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"interface Todo {\n  title: string;\n  time: string;\n  done: boolean;\n}\nconst Get = alovaInstance.Get<Todo[]>('/todo/list');\nconst { data } = useRequest(Get);\n// vue: The type of data is Ref<Todo[]>\n// react: The type of data is Todo[]\n// svelte: The type of data is Writable<Todo[]>\n"})}),"\n",(0,a.jsx)(t.h3,{id:"case-2",children:"Case 2"}),"\n",(0,a.jsxs)(t.p,{children:["When the response data needs to be converted by calling ",(0,a.jsx)(t.code,{children:"transformData"}),", the type needs to be specified in the conversion function parameter, and then its return value type will be used as the response data type."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"interface Todo {\n  title: string;\n  time: string;\n  done: boolean;\n}\nconst Get = alovaInstance.Get('/todo/list', {\n  //Write the type into the data parameter, and the headers will be automatically inferred, so you don\u2019t need to specify the type.\n  transformData(data: Todo[], headers) {\n    return data.map(item => ({\n      ...item,\n      status: item.done ? 'Completed' : 'Not completed'\n    }));\n  }\n});\n\nconst { data } = useRequest(Get);\n// vue: The type of data is Ref<(Todo & { status: string })[]>\n// react: The type of data is (Todo & { status: string })[]\n// svelte: The type of data is Writable<(Todo & { status: string })[]>\n"})}),"\n",(0,a.jsx)(t.admonition,{title:"note",type:"warning",children:(0,a.jsx)(t.p,{children:"The response data is converted by the global response interceptor, so when setting the type, it should also be set to the converted type."})}),"\n",(0,a.jsx)(t.h2,{id:"type-inferred-from-request-adapter",children:"Type inferred from request adapter"}),"\n",(0,a.jsxs)(t.p,{children:["Because alova supports custom request adapters, and the request configuration objects, response objects, and response headers of different adapters may be different, so the global ",(0,a.jsx)(t.code,{children:"beforeRequest"}),", ",(0,a.jsx)(t.code,{children:"responded"})," interceptors, and the configuration object when the ",(0,a.jsx)(t.code,{children:"Method"})," instance is created The types will be automatically inferred based on the types provided by the request adapter. Let's look at these types first."]}),"\n",(0,a.jsxs)(t.p,{children:["If you are using ",(0,a.jsx)(t.a,{href:"https://github.com/alovajs/alova/blob/main/src/predefine/GlobalFetch.ts",children:(0,a.jsx)(t.strong,{children:"GlobalFetch"})}),", alova will automatically infer the type using ",(0,a.jsx)(t.code,{children:"fetch api"}),", The types of fetch api are as follows."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"declare function fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;\n"})}),"\n",(0,a.jsx)(t.h3,{id:"method-configuration-type-of-instance",children:"Method configuration type of instance"}),"\n",(0,a.jsx)(t.p,{children:"The method configuration type will be automatically inferred as:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// AlovaMethodCommonConfig is a unified request parameter and behavior parameter\n// highlight-start\nconst methodConfig: AlovaMethodCommonConfig & RequestInit = {\n  // highlight-end\n  // ...\n};\nalovaInstance.Get('/api/user', methodConfig);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"global-response-interceptor-parameter-type",children:"Global response interceptor parameter type"}),"\n",(0,a.jsx)(t.p,{children:"The type of responded interceptor will be automatically inferred as:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"createAlova({\n  // ...\n  // highlight-start\n  responded: (response: Response, method: Method) => {\n    // highlight-end\n    // ...\n  }\n});\n"})})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},85162:(e,t,n)=>{n.d(t,{Z:()=>s});n(67294);var a=n(90512);const r={tabItem:"tabItem_Ymn6"};var o=n(85893);function s(e){let{children:t,hidden:n,className:s}=e;return(0,o.jsx)("div",{role:"tabpanel",className:(0,a.Z)(r.tabItem,s),hidden:n,children:t})}},74866:(e,t,n)=>{n.d(t,{Z:()=>k});var a=n(67294),r=n(90512),o=n(12466),s=n(16550),i=n(20469),l=n(91980),c=n(67392),d=n(20812);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const r=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=p(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[c,u]=f({queryString:n,groupId:r}),[m,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,d.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),y=(()=>{const e=c??m;return h({value:e,tabValues:o})?e:null})();(0,i.Z)((()=>{y&&l(y)}),[y]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var b=n(72389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=n(85893);function g(e){let{className:t,block:n,selectedValue:a,selectValue:s,tabValues:i}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),r=i[n].value;r!==a&&(c(t),s(r))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},t),children:i.map((e=>{let{value:t,label:n,attributes:o}=e;return(0,v.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:u,onClick:d,...o,className:(0,r.Z)("tabs__item",y.tabItem,o?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function x(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function j(e){const t=m(e);return(0,v.jsxs)("div",{className:(0,r.Z)("tabs-container",y.tabList),children:[(0,v.jsx)(g,{...t,...e}),(0,v.jsx)(x,{...t,...e})]})}function k(e){const t=(0,b.Z)();return(0,v.jsx)(j,{...e,children:u(e.children)},String(t))}},11151:(e,t,n)=>{n.d(t,{Z:()=>i,a:()=>s});var a=n(67294);const r={},o=a.createContext(r);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);