"use strict";(self.webpackChunkalova_website=self.webpackChunkalova_website||[]).push([[6904],{78389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=n(85893),a=n(11151);const o={title:"Extension integration"},r=void 0,s={id:"tutorial/getting-started/extension-integration",title:"Extension integration",description:"Integrating Alova's editor extension can make it more powerful.",source:"@site/docs/tutorial/02-getting-started/09-extension-integration.md",sourceDirName:"tutorial/02-getting-started",slug:"/tutorial/getting-started/extension-integration",permalink:"/next/tutorial/getting-started/extension-integration",draft:!1,unlisted:!1,editUrl:"https://github.com/alovajs/alovajs.github.io/blob/main/docs/tutorial/02-getting-started/09-extension-integration.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"Extension integration"},sidebar:"tutorial",previous:{title:"Server Usage",permalink:"/next/tutorial/getting-started/basic/server"},next:{title:"Conclusion",permalink:"/next/tutorial/getting-started/congratulations"}},p={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Usage",id:"usage",level:2}];function c(e){const t={admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Integrating Alova's editor extension can make it more powerful."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Automatically generate request code and response data types, and experience smart prompts for interface data in js projects."}),"\n",(0,i.jsx)(t.li,{children:"Embed api documents in the code to experience the effect of checking and using APIs."}),"\n",(0,i.jsx)(t.li,{children:"Update api regularly and actively notify front-end development, no longer relying on server-side developers to notify."}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsx)(t.p,{children:"The extension will be released soon..."})}),"\n",(0,i.jsxs)(t.blockquote,{children:["\n",(0,i.jsx)(t.p,{children:"Automatically generate support for swagger-v2 and openapi-v3 specifications."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsxs)(t.p,{children:["When using the extension, you need to specify the input source and output directory from the openapi file, etc. Create ",(0,i.jsx)(t.code,{children:"alova.config.js"})," in the project root directory. The specific configuration is as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"// alova.config.js\nmodule.exports = {\n  // API generation setting array, each item represents an automatically generated rule, including the generated input and output directories, standard file addresses, etc.\n  generator: [\n    // Server 1\n    {\n      // Input parameter 1: openapi json file url address\n      input: 'http://localhost:3000/openapi.json',\n\n      // Input parameter 2: local address with the current project as the relative directory\n      // input: 'openapi/api.json'\n\n      // Input parameter 3: When there is no direct reference to the openapi file, it is a document address, and the document type must be specified with the platform parameter\n      // input: 'http://192.168.5.123:8080'\n\n      // (Optional) platform is a platform that supports openapi. Currently only swagger is supported. The default is empty\n      // When this parameter is specified, the input field only needs to specify the address of the document without specifying the openapi file\n      platform: 'swagger',\n\n      // Output path of interface file and type file. Multiple generators cannot have the same address, otherwise the generated code will overwrite each other\n      output: 'src/api',\n\n      // (Optional) Specify the mediaType of the generated response data. Use this data type to generate the response ts format of the 200 status code. The default is application/json\n      responseMediaType: 'application/json',\n\n      // (Optional) Specify the bodyMediaType of the generated request body data. Use this data type to generate the ts format of the request body. The default is application/json\n      bodyMediaType: 'application/json',\n\n      /**\n       * (Optional) The type of generated code. The optional values \u200b\u200bare auto/ts/typescript/module/commonjs. The default is auto. The type of the current project will be determined by certain rules. If the generation is incorrect, you can also customize the specified type:\n       * ts/typescript: The same meaning, indicating the generation of ts type files\n       * module: Generate esModule specification files\n       * commonjs: Indicates the generation of commonjs specification files\n       */\n      type: 'auto',\n\n      /**\n       * (Optional) Filter or convert the generated api interface function, return a new apiDescriptor to generate the api call function, if this function is not specified, the apiDescripor object is not converted\n       */\n      handleApi: apiDescriptor => {\n        // Returning a falsy value means filtering this api\n        if (!apiDescriptor.path.startWith('/user')) {\n          return;\n        }\n\n        apiDescriptor.parameter = apiDescriptor.parameter.filter(\n          param => param.in === 'header' && param.name === 'token'\n        );\n        delete apiDescriptor.requestBody.id;\n        apiDescriptor.url = apiDescriptor.url.replace('/user', '');\n        return apiDescriptor;\n      }\n    },\n\n    // Server 2\n    {\n      // ...\n    }\n  ],\n\n  // (Optional) Whether to automatically update the interface, enabled by default, checked every 5 minutes, disabled when false\n  autoUpdate: true\n\n  /* You can also configure more detailed parameters\n  autoUpdate: {\n    // Update when the editor is opened, false by default\n    launchEditor: true,\n    // Automatic update interval, in milliseconds\n    interval: 5 * 60 * 1000\n  }\n  */\n};\n"})}),"\n",(0,i.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["The generated API code is accessed through the global ",(0,i.jsx)(t.code,{children:"Apis"})," by default. You can enjoy the smart prompts provided by the editor to quickly preview the API information, allowing you to use the API while checking."]}),"\n",(0,i.jsxs)(t.p,{children:["API parameters will be specified through parameters such as ",(0,i.jsx)(t.code,{children:"params/pathParams/data/headers"}),", and you can also specify the config parameters of the method instance."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:"Apis.user.changeProfile({\n  // (optional)query parameters\n  params: {\n    id: 12\n  },\n  // (optional)path parameters\n  pathParams: {\n    id2: 20\n  },\n  // (optional)body parameters\n  data: {\n    name: 'alova',\n    age: 18\n  },\n  // (optional)header parameters\n  headers: {\n    'Content-Type': 'application/json'\n  },\n\n  // config configuration items supported by other methods\n  cacheFor: 100 * 1000,\n  transform: response => response.detail\n});\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var i=n(67294);const a={},o=i.createContext(a);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);